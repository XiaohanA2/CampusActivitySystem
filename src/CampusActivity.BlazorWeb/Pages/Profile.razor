@page "/profile"
@using CampusActivity.Shared.DTOs
@using System.ComponentModel.DataAnnotations
@inject IAuthService AuthService
@inject NavigationManager Navigation

<PageTitle>个人资料</PageTitle>

<div class="container mt-4">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <!-- 个人资料卡片 -->
            <div class="card mb-4">
                <div class="card-header">
                    <h4><i class="oi oi-person me-2"></i>个人资料</h4>
                </div>
                <div class="card-body">
                    @if (currentUser != null)
                    {
                        <EditForm Model="currentUser" OnValidSubmit="HandleUpdateProfile">
                            <DataAnnotationsValidator />
                            <ValidationSummary />

                            <div class="row">
                                <div class="col-md-6 mb-3">
                                    <label class="form-label">用户名</label>
                                    <input type="text" class="form-control" value="@currentUser.Username" readonly />
                                </div>
                                <div class="col-md-6 mb-3">
                                    <label class="form-label">角色</label>
                                    <input type="text" class="form-control" value="@GetRoleDisplayName(currentUser.Role)" readonly />
                                </div>
                            </div>

                            <div class="row">
                                <div class="col-md-6 mb-3">
                                    <label class="form-label">姓名 <span class="text-danger">*</span></label>
                                    <InputText class="form-control" @bind-Value="currentUser.FullName" />
                                    <ValidationMessage For="@(() => currentUser.FullName)" />
                                </div>
                                <div class="col-md-6 mb-3">
                                    <label class="form-label">邮箱 <span class="text-danger">*</span></label>
                                    <InputText class="form-control" @bind-Value="currentUser.Email" />
                                    <ValidationMessage For="@(() => currentUser.Email)" />
                                </div>
                            </div>

                            <div class="row">
                                <div class="col-md-6 mb-3">
                                    <label class="form-label">手机号</label>
                                    <InputText class="form-control" @bind-Value="currentUser.Phone" />
                                </div>
                                <div class="col-md-6 mb-3">
                                    <label class="form-label">注册时间</label>
                                    <input type="text" class="form-control" value="@currentUser.CreatedAt.ToString("yyyy-MM-dd HH:mm")" readonly />
                                </div>
                            </div>

                            @if (currentUser.Role == UserRole.Student)
                            {
                                <div class="row">
                                    <div class="col-md-6 mb-3">
                                        <label class="form-label">学号</label>
                                        <input type="text" class="form-control" value="@currentUser.StudentId" readonly />
                                    </div>
                                    <div class="col-md-6 mb-3">
                                        <label class="form-label">专业</label>
                                        <input type="text" class="form-control" value="@currentUser.Major" readonly />
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-md-6 mb-3">
                                        <label class="form-label">年级</label>
                                        <input type="text" class="form-control" value="@(currentUser.Grade?.ToString() ?? "未设置")" readonly />
                                    </div>
                                </div>
                            }

                            @if (currentUser.Role == UserRole.Teacher)
                            {
                                <div class="row">
                                    <div class="col-md-6 mb-3">
                                        <label class="form-label">工号</label>
                                        <input type="text" class="form-control" value="@currentUser.EmployeeId" readonly />
                                    </div>
                                    <div class="col-md-6 mb-3">
                                        <label class="form-label">部门</label>
                                        <input type="text" class="form-control" value="@currentUser.Department" readonly />
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-md-6 mb-3">
                                        <label class="form-label">职称</label>
                                        <input type="text" class="form-control" value="@currentUser.Title" readonly />
                                    </div>
                                </div>
                            }

                            <div class="d-flex justify-content-between">
                                <button type="submit" class="btn btn-primary" disabled="@isLoading">
                                    @if (isLoading)
                                    {
                                        <span class="spinner-border spinner-border-sm me-2"></span>
                                    }
                                    保存修改
                                </button>
                                <a href="/" class="btn btn-secondary">返回首页</a>
                            </div>
                        </EditForm>

                        @if (!string.IsNullOrEmpty(message))
                        {
                            <div class="alert @(isSuccess ? "alert-success" : "alert-danger") mt-3">
                                @message
                            </div>
                        }
                    }
                    else
                    {
                        <div class="text-center">
                            <p>正在加载用户信息...</p>
                        </div>
                    }
                </div>
            </div>

            <!-- 密码修改卡片 -->
            <div class="card">
                <div class="card-header">
                    <h5><i class="oi oi-lock me-2"></i>修改密码</h5>
                </div>
                <div class="card-body">
                    <EditForm Model="passwordModel" OnValidSubmit="HandleChangePassword">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label class="form-label">当前密码 <span class="text-danger">*</span></label>
                                <InputText type="password" class="form-control" @bind-Value="passwordModel.CurrentPassword" />
                                <ValidationMessage For="@(() => passwordModel.CurrentPassword)" />
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">新密码 <span class="text-danger">*</span></label>
                                <InputText type="password" class="form-control" @bind-Value="passwordModel.NewPassword" />
                                <ValidationMessage For="@(() => passwordModel.NewPassword)" />
                            </div>
                        </div>

                        <div class="mb-3">
                            <label class="form-label">确认新密码 <span class="text-danger">*</span></label>
                            <InputText type="password" class="form-control" @bind-Value="passwordModel.ConfirmPassword" />
                            <ValidationMessage For="@(() => passwordModel.ConfirmPassword)" />
                        </div>

                        <button type="submit" class="btn btn-warning" disabled="@isChangingPassword">
                            @if (isChangingPassword)
                            {
                                <span class="spinner-border spinner-border-sm me-2"></span>
                            }
                            修改密码
                        </button>
                    </EditForm>

                    @if (!string.IsNullOrEmpty(passwordMessage))
                    {
                        <div class="alert @(isPasswordSuccess ? "alert-success" : "alert-danger") mt-3">
                            @passwordMessage
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private UserDto? currentUser;
    private string message = string.Empty;
    private bool isSuccess = false;
    private bool isLoading = false;
    
    private ChangePasswordModel passwordModel = new();
    private string passwordMessage = string.Empty;
    private bool isPasswordSuccess = false;
    private bool isChangingPassword = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadUserProfile();
    }

    private async Task LoadUserProfile()
    {
        try
        {
            currentUser = await AuthService.GetCurrentUserAsync();
            if (currentUser == null)
            {
                Navigation.NavigateTo("/login");
            }
        }
        catch (Exception ex)
        {
            message = $"加载用户信息失败: {ex.Message}";
            isSuccess = false;
        }
    }

    private async Task HandleUpdateProfile()
    {
        if (currentUser == null) return;

        isLoading = true;
        message = string.Empty;

        try
        {
            // 调用AuthService更新用户资料
            var success = await AuthService.UpdateProfileAsync(currentUser);
            
            if (success)
            {
                message = "个人资料更新成功！";
                isSuccess = true;
            }
            else
            {
                message = "更新失败，请稍后重试";
                isSuccess = false;
            }
        }
        catch (Exception ex)
        {
            message = $"更新失败: {ex.Message}";
            isSuccess = false;
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task HandleChangePassword()
    {
        if (passwordModel.NewPassword != passwordModel.ConfirmPassword)
        {
            passwordMessage = "新密码和确认密码不匹配";
            isPasswordSuccess = false;
            return;
        }

        isChangingPassword = true;
        passwordMessage = string.Empty;

        try
        {
            var success = await AuthService.ChangePasswordAsync(passwordModel.CurrentPassword, passwordModel.NewPassword);
            
            if (success)
            {
                passwordMessage = "密码修改成功！";
                isPasswordSuccess = true;
                passwordModel = new ChangePasswordModel(); // 清空表单
            }
            else
            {
                passwordMessage = "密码修改失败，请检查当前密码是否正确";
                isPasswordSuccess = false;
            }
        }
        catch (Exception ex)
        {
            passwordMessage = $"密码修改失败: {ex.Message}";
            isPasswordSuccess = false;
        }
        finally
        {
            isChangingPassword = false;
        }
    }

    private string GetRoleDisplayName(UserRole role) => role switch
    {
        UserRole.Student => "学生",
        UserRole.Teacher => "教师",
        UserRole.Admin => "管理员",
        _ => "未知"
    };

    public class ChangePasswordModel
    {
        [Required(ErrorMessage = "当前密码不能为空")]
        public string CurrentPassword { get; set; } = string.Empty;

        [Required(ErrorMessage = "新密码不能为空")]
        [StringLength(100, MinimumLength = 6, ErrorMessage = "密码长度必须在6-100个字符之间")]
        public string NewPassword { get; set; } = string.Empty;

        [Required(ErrorMessage = "确认密码不能为空")]
        [Compare(nameof(NewPassword), ErrorMessage = "新密码和确认密码不匹配")]
        public string ConfirmPassword { get; set; } = string.Empty;
    }
} 