@page "/admin/activities"
@using CampusActivity.BlazorWeb.Services
@using CampusActivity.Shared.DTOs
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Roles = "Admin")]
@inject IAdminService AdminService
@inject IJSRuntime JSRuntime

<PageTitle>活动管理 - 校园活动系统</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h2 class="mb-0">
                    <i class="oi oi-calendar"></i> 活动管理
                </h2>
                <div class="btn-group">
                    <a href="/admin" class="btn btn-outline-secondary">
                        <i class="oi oi-arrow-left"></i> 返回仪表板
                    </a>
                </div>
            </div>
        </div>
    </div>

    <!-- 搜索和筛选 -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card shadow">
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-4">
                            <div class="form-group">
                                <label>搜索活动</label>
                                <input type="text" class="form-control" @bind="searchTerm" @onkeyup="OnSearchKeyUp" placeholder="输入活动名称或描述..." />
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="form-group">
                                <label>活动状态</label>
                                <select class="form-control" @bind="selectedStatus">
                                    <option value="">全部状态</option>
                                    <option value="upcoming">即将开始</option>
                                    <option value="ongoing">进行中</option>
                                    <option value="completed">已结束</option>
                                    <option value="draft">草稿</option>
                                </select>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="form-group">
                                <label>每页显示</label>
                                <select class="form-control" @bind="pageSize">
                                    <option value="10">10</option>
                                    <option value="20">20</option>
                                    <option value="50">50</option>
                                </select>
                            </div>
                        </div>
                        <div class="col-md-2">
                            <div class="form-group">
                                <label>&nbsp;</label>
                                <button class="btn btn-primary btn-block" @onclick="LoadActivities">
                                    <i class="oi oi-magnifying-glass"></i> 搜索
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="text-center py-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">加载中...</span>
            </div>
            <p class="mt-2">正在加载活动数据...</p>
        </div>
    }
    else
    {
        <!-- 活动列表 -->
        <div class="row">
            <div class="col-12">
                <div class="card shadow">
                    <div class="card-header py-3">
                        <h6 class="m-0 font-weight-bold text-primary">
                            活动列表 (共 @pagedResult.TotalCount 个活动)
                        </h6>
                    </div>
                    <div class="card-body">
                        @if (pagedResult.Items.Any())
                        {
                            <div class="table-responsive">
                                <table class="table table-bordered table-hover">
                                    <thead class="thead-light">
                                        <tr>
                                            <th>ID</th>
                                            <th>活动名称</th>
                                            <th>分类</th>
                                            <th>创建者</th>
                                            <th>时间</th>
                                            <th>地点</th>
                                            <th>报名情况</th>
                                            <th>状态</th>
                                            <th>创建时间</th>
                                            <th>操作</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var activity in pagedResult.Items)
                                        {
                                            <tr>
                                                <td>@activity.Id</td>
                                                <td>
                                                    <strong>@activity.Title</strong>
                                                    @if (!string.IsNullOrEmpty(activity.Description) && activity.Description.Length > 50)
                                                    {
                                                        <br><small class="text-muted">@(activity.Description.Substring(0, 50))...</small>
                                                    }
                                                    else if (!string.IsNullOrEmpty(activity.Description))
                                                    {
                                                        <br><small class="text-muted">@activity.Description</small>
                                                    }
                                                </td>
                                                <td>
                                                    <span class="badge badge-info">@activity.Category</span>
                                                </td>
                                                <td>@activity.Creator</td>
                                                <td>
                                                    <small>
                                                        开始: @activity.StartTime.ToString("MM-dd HH:mm")<br>
                                                        结束: @activity.EndTime.ToString("MM-dd HH:mm")
                                                    </small>
                                                </td>
                                                <td>@activity.Location</td>
                                                <td>
                                                    <span class="badge @GetRegistrationBadgeClass(activity.RegistrationCount, activity.MaxParticipants)">
                                                        @activity.RegistrationCount / @activity.MaxParticipants
                                                    </span>
                                                </td>
                                                <td>
                                                    <span class="badge @GetActivityStatusBadgeClass(activity)">
                                                        @GetActivityStatusText(activity)
                                                    </span>
                                                </td>
                                                <td>@activity.CreatedAt.ToString("yyyy-MM-dd")</td>
                                                <td>
                                                    <div class="btn-group btn-group-sm">
                                                        <a href="/activities/@activity.Id" class="btn btn-info btn-sm" title="查看详情">
                                                            <i class="oi oi-eye"></i>
                                                        </a>
                                                        <button class="btn btn-danger btn-sm"
                                                                @onclick="() => DeleteActivity(activity.Id, activity.Title)"
                                                                title="删除活动">
                                                            <i class="oi oi-trash"></i>
                                                        </button>
                                                    </div>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>

                            <!-- 分页 -->
                            @if (pagedResult.TotalPages > 1)
                            {
                                <nav aria-label="活动列表分页">
                                    <ul class="pagination justify-content-center">
                                        <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                                            <button class="page-link" @onclick="() => ChangePage(1)" disabled="@(currentPage == 1)">首页</button>
                                        </li>
                                        <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                                            <button class="page-link" @onclick="() => ChangePage(currentPage - 1)" disabled="@(currentPage == 1)">上一页</button>
                                        </li>

                                        @for (int i = Math.Max(1, currentPage - 2); i <= Math.Min(pagedResult.TotalPages, currentPage + 2); i++)
                                        {
                                            <li class="page-item @(i == currentPage ? "active" : "")">
                                                <button class="page-link" @onclick="() => ChangePage(i)">@i</button>
                                            </li>
                                        }

                                        <li class="page-item @(currentPage == pagedResult.TotalPages ? "disabled" : "")">
                                            <button class="page-link" @onclick="() => ChangePage(currentPage + 1)" disabled="@(currentPage == pagedResult.TotalPages)">下一页</button>
                                        </li>
                                        <li class="page-item @(currentPage == pagedResult.TotalPages ? "disabled" : "")">
                                            <button class="page-link" @onclick="() => ChangePage(pagedResult.TotalPages)" disabled="@(currentPage == pagedResult.TotalPages)">末页</button>
                                        </li>
                                    </ul>
                                </nav>
                            }
                        }
                        else
                        {
                            <div class="text-center py-4">
                                <i class="oi oi-info" style="font-size: 3rem; color: #6c757d;"></i>
                                <p class="text-muted mt-2">没有找到符合条件的活动</p>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private PagedResult<AdminActivityDto> pagedResult = new();
    private bool isLoading = true;
    private int currentPage = 1;
    private int pageSize = 20;
    private string searchTerm = string.Empty;
    private string selectedStatus = string.Empty;
    private Timer? searchTimer;

    protected override async Task OnInitializedAsync()
    {
        await LoadActivities();
    }

    private async Task LoadActivities()
    {
        isLoading = true;
        try
        {
            pagedResult = await AdminService.GetAllActivitiesAsync(
                currentPage, 
                pageSize, 
                string.IsNullOrWhiteSpace(searchTerm) ? null : searchTerm,
                null,
                string.IsNullOrWhiteSpace(selectedStatus) ? null : selectedStatus);
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"加载活动列表失败: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task OnSearchKeyUp()
    {
        searchTimer?.Dispose();
        searchTimer = new Timer(async _ =>
        {
            currentPage = 1;
            await InvokeAsync(async () =>
            {
                await LoadActivities();
                StateHasChanged();
            });
        }, null, TimeSpan.FromMilliseconds(500), Timeout.InfiniteTimeSpan);
    }

    private async Task OnStatusChanged()
    {
        currentPage = 1;
        await LoadActivities();
    }

    private async Task OnPageSizeChanged()
    {
        currentPage = 1;
        await LoadActivities();
    }

    private async Task ChangePage(int page)
    {
        currentPage = page;
        await LoadActivities();
    }

    private async Task DeleteActivity(int activityId, string title)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"确认删除活动 \"{title}\" 吗？此操作将同时删除所有相关的报名记录，不可撤销！");
        if (confirmed)
        {
            try
            {
                var success = await AdminService.ForceDeleteActivityAsync(activityId);
                if (success)
                {
                    await JSRuntime.InvokeVoidAsync("alert", "活动已删除");
                    await LoadActivities();
                }
                else
                {
                    await JSRuntime.InvokeVoidAsync("alert", "删除活动失败");
                }
            }
            catch (Exception ex)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"操作失败: {ex.Message}");
            }
        }
    }

    private string GetActivityStatusText(AdminActivityDto activity)
    {
        var now = DateTime.Now;
        
        if (!activity.IsPublished)
            return "草稿";
        
        if (activity.StartTime > now)
            return "即将开始";
        
        if (activity.EndTime < now)
            return "已结束";
        
        return "进行中";
    }

    private string GetActivityStatusBadgeClass(AdminActivityDto activity)
    {
        var now = DateTime.Now;
        
        if (!activity.IsPublished)
            return "badge-secondary";
        
        if (activity.StartTime > now)
            return "badge-primary";
        
        if (activity.EndTime < now)
            return "badge-dark";
        
        return "badge-success";
    }

    private string GetRegistrationBadgeClass(int registered, int max)
    {
        var percentage = (double)registered / max;
        
        if (percentage >= 1.0)
            return "badge-danger";
        
        if (percentage >= 0.8)
            return "badge-warning";
        
        if (percentage >= 0.5)
            return "badge-info";
        
        return "badge-success";
    }

    public void Dispose()
    {
        searchTimer?.Dispose();
    }
} 