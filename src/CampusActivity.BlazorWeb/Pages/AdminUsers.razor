@page "/admin/users"
@using CampusActivity.BlazorWeb.Services
@using CampusActivity.Shared.DTOs
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Roles = "Admin")]
@inject IAdminService AdminService
@inject IJSRuntime JSRuntime

<PageTitle>用户管理 - 校园活动系统</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h2 class="mb-0">
                    <i class="oi oi-people"></i> 用户管理
                </h2>
                <div class="btn-group">
                    <a href="/admin" class="btn btn-outline-secondary">
                        <i class="oi oi-arrow-left"></i> 返回仪表板
                    </a>
                </div>
            </div>
        </div>
    </div>

    <!-- 搜索和筛选 -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card shadow">
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-4">
                            <div class="form-group">
                                <label>搜索用户</label>
                                <input type="text" class="form-control" @bind="searchTerm" @onkeyup="OnSearchKeyUp" placeholder="输入用户名、姓名或邮箱..." />
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="form-group">
                                <label>角色筛选</label>
                                <select class="form-control" @bind="selectedRole">
                                    <option value="">全部角色</option>
                                    <option value="Student">学生</option>
                                    <option value="Teacher">教师</option>
                                    <option value="Admin">管理员</option>
                                </select>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="form-group">
                                <label>每页显示</label>
                                <select class="form-control" @bind="pageSize">
                                    <option value="10">10</option>
                                    <option value="20">20</option>
                                    <option value="50">50</option>
                                </select>
                            </div>
                        </div>
                        <div class="col-md-2">
                            <div class="form-group">
                                <label>&nbsp;</label>
                                <button class="btn btn-primary btn-block" @onclick="LoadUsers">
                                    <i class="oi oi-magnifying-glass"></i> 搜索
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="text-center py-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">加载中...</span>
            </div>
            <p class="mt-2">正在加载用户数据...</p>
        </div>
    }
    else
    {
        <!-- 用户列表 -->
        <div class="row">
            <div class="col-12">
                <div class="card shadow">
                    <div class="card-header py-3">
                        <h6 class="m-0 font-weight-bold text-primary">
                            用户列表 (共 @pagedResult.TotalCount 个用户)
                        </h6>
                    </div>
                    <div class="card-body">
                        @if (pagedResult.Items.Any())
                        {
                            <div class="table-responsive">
                                <table class="table table-bordered table-hover">
                                    <thead class="thead-light">
                                        <tr>
                                            <th>ID</th>
                                            <th>用户名</th>
                                            <th>姓名</th>
                                            <th>邮箱</th>
                                            <th>角色</th>
                                            <th>状态</th>
                                            <th>最后登录</th>
                                            <th>注册时间</th>
                                            <th>操作</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var user in pagedResult.Items)
                                        {
                                            <tr>
                                                <td>@user.Id</td>
                                                <td>
                                                    <strong>@user.Username</strong>
                                                    @if (!string.IsNullOrEmpty(user.StudentId))
                                                    {
                                                        <br><small class="text-muted">学号: @user.StudentId</small>
                                                    }
                                                    @if (!string.IsNullOrEmpty(user.EmployeeId))
                                                    {
                                                        <br><small class="text-muted">工号: @user.EmployeeId</small>
                                                    }
                                                </td>
                                                <td>
                                                    @user.FullName
                                                    @if (!string.IsNullOrEmpty(user.Major))
                                                    {
                                                        <br><small class="text-muted">专业: @user.Major</small>
                                                    }
                                                    @if (!string.IsNullOrEmpty(user.Department))
                                                    {
                                                        <br><small class="text-muted">部门: @user.Department</small>
                                                    }
                                                </td>
                                                <td>@user.Email</td>
                                                <td>
                                                    <span class="badge @GetRoleBadgeClass(user.Role)">
                                                        @GetRoleName(user.Role)
                                                    </span>
                                                </td>
                                                <td>
                                                    <span class="badge @(user.IsActive ? "badge-success" : "badge-danger")">
                                                        @(user.IsActive ? "活跃" : "禁用")
                                                    </span>
                                                </td>
                                                <td>
                                                    @if (user.LastLoginAt.HasValue)
                                                    {
                                                        @user.LastLoginAt.Value.ToString("yyyy-MM-dd HH:mm")
                                                    }
                                                    else
                                                    {
                                                        <span class="text-muted">从未登录</span>
                                                    }
                                                </td>
                                                <td>@user.CreatedAt.ToString("yyyy-MM-dd")</td>
                                                <td>
                                                    <div class="btn-group btn-group-sm">
                                                        <button class="btn @(user.IsActive ? "btn-warning" : "btn-success") btn-sm"
                                                                @onclick="() => ToggleUserStatus(user.Id, !user.IsActive)"
                                                                title="@(user.IsActive ? "禁用用户" : "启用用户")">
                                                            <i class="oi @(user.IsActive ? "oi-ban" : "oi-check")"></i>
                                                        </button>
                                                        <button class="btn btn-info btn-sm"
                                                                @onclick="() => ResetPassword(user.Id)"
                                                                title="重置密码">
                                                            <i class="oi oi-key"></i>
                                                        </button>
                                                        <button class="btn btn-danger btn-sm"
                                                                @onclick="() => DeleteUser(user.Id, user.Username)"
                                                                title="删除用户">
                                                            <i class="oi oi-trash"></i>
                                                        </button>
                                                    </div>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>

                            <!-- 分页 -->
                            @if (pagedResult.TotalPages > 1)
                            {
                                <nav aria-label="用户列表分页">
                                    <ul class="pagination justify-content-center">
                                        <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                                            <button class="page-link" @onclick="() => ChangePage(1)" disabled="@(currentPage == 1)">首页</button>
                                        </li>
                                        <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                                            <button class="page-link" @onclick="() => ChangePage(currentPage - 1)" disabled="@(currentPage == 1)">上一页</button>
                                        </li>

                                        @for (int i = Math.Max(1, currentPage - 2); i <= Math.Min(pagedResult.TotalPages, currentPage + 2); i++)
                                        {
                                            <li class="page-item @(i == currentPage ? "active" : "")">
                                                <button class="page-link" @onclick="() => ChangePage(i)">@i</button>
                                            </li>
                                        }

                                        <li class="page-item @(currentPage == pagedResult.TotalPages ? "disabled" : "")">
                                            <button class="page-link" @onclick="() => ChangePage(currentPage + 1)" disabled="@(currentPage == pagedResult.TotalPages)">下一页</button>
                                        </li>
                                        <li class="page-item @(currentPage == pagedResult.TotalPages ? "disabled" : "")">
                                            <button class="page-link" @onclick="() => ChangePage(pagedResult.TotalPages)" disabled="@(currentPage == pagedResult.TotalPages)">末页</button>
                                        </li>
                                    </ul>
                                </nav>
                            }
                        }
                        else
                        {
                            <div class="text-center py-4">
                                <i class="oi oi-info" style="font-size: 3rem; color: #6c757d;"></i>
                                <p class="text-muted mt-2">没有找到符合条件的用户</p>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private PagedResult<UserDto> pagedResult = new();
    private bool isLoading = true;
    private int currentPage = 1;
    private int pageSize = 20;
    private string searchTerm = string.Empty;
    private string selectedRole = string.Empty;
    private Timer? searchTimer;

    protected override async Task OnInitializedAsync()
    {
        await LoadUsers();
    }

    private async Task LoadUsers()
    {
        isLoading = true;
        try
        {
            UserRole? roleFilter = null;
            if (!string.IsNullOrEmpty(selectedRole) && Enum.TryParse<UserRole>(selectedRole, out var role))
            {
                roleFilter = role;
            }

            pagedResult = await AdminService.GetAllUsersAsync(
                currentPage, 
                pageSize, 
                string.IsNullOrWhiteSpace(searchTerm) ? null : searchTerm,
                roleFilter);
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"加载用户列表失败: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task OnSearchKeyUp()
    {
        searchTimer?.Dispose();
        searchTimer = new Timer(_ =>
        {
            currentPage = 1;
            _ = InvokeAsync(async () =>
            {
                await LoadUsers();
                StateHasChanged();
            });
        }, null, TimeSpan.FromMilliseconds(500), Timeout.InfiniteTimeSpan);
    }

    private async Task OnRoleChanged()
    {
        currentPage = 1;
        await LoadUsers();
    }

    private async Task OnPageSizeChanged()
    {
        currentPage = 1;
        await LoadUsers();
    }

    private async Task ChangePage(int page)
    {
        currentPage = page;
        await LoadUsers();
    }

    private async Task ToggleUserStatus(int userId, bool newStatus)
    {
        try
        {
            var success = await AdminService.UpdateUserStatusAsync(userId, newStatus);
            if (success)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"用户状态已更新为{(newStatus ? "启用" : "禁用")}");
                await LoadUsers();
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "更新用户状态失败");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"操作失败: {ex.Message}");
        }
    }

    private async Task ResetPassword(int userId)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "确认重置该用户的密码吗？密码将被重置为默认密码 123456");
        if (confirmed)
        {
            try
            {
                var success = await AdminService.ResetUserPasswordAsync(userId);
                if (success)
                {
                    await JSRuntime.InvokeVoidAsync("alert", "密码已重置为: 123456");
                }
                else
                {
                    await JSRuntime.InvokeVoidAsync("alert", "重置密码失败");
                }
            }
            catch (Exception ex)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"操作失败: {ex.Message}");
            }
        }
    }

    private async Task DeleteUser(int userId, string username)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"确认删除用户 {username} 吗？此操作不可撤销！");
        if (confirmed)
        {
            try
            {
                var success = await AdminService.DeleteUserAsync(userId);
                if (success)
                {
                    await JSRuntime.InvokeVoidAsync("alert", "用户已删除");
                    await LoadUsers();
                }
                else
                {
                    await JSRuntime.InvokeVoidAsync("alert", "删除用户失败");
                }
            }
            catch (Exception ex)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"操作失败: {ex.Message}");
            }
        }
    }

    private string GetRoleName(UserRole role)
    {
        return role switch
        {
            UserRole.Student => "学生",
            UserRole.Teacher => "教师",
            UserRole.Admin => "管理员",
            _ => role.ToString()
        };
    }

    private string GetRoleBadgeClass(UserRole role)
    {
        return role switch
        {
            UserRole.Student => "badge-primary",
            UserRole.Teacher => "badge-success",
            UserRole.Admin => "badge-danger",
            _ => "badge-secondary"
        };
    }

    public void Dispose()
    {
        searchTimer?.Dispose();
    }
} 