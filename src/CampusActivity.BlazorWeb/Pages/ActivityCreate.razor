@page "/activities/create"
@using CampusActivity.BlazorWeb.Services
@using CampusActivity.Shared.DTOs
@using CampusActivity.BlazorWeb.Shared
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Roles = "Teacher,Admin")]
@inject IAdminService AdminService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<PageTitle>创建新活动</PageTitle>

<div class="container mt-4">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="card shadow">
                <div class="card-header bg-primary text-white">
                    <h4 class="mb-0"><i class="oi oi-plus me-2"></i>创建新活动</h4>
                </div>
                <div class="card-body">
                    @if (categories == null)
                    {
                        <div class="text-center py-3">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">加载中...</span>
                            </div>
                            <p class="mt-2">正在加载分类...</p>
                        </div>
                    }
                    else
                    {
                    <EditForm Model="activity" OnValidSubmit="HandleValidSubmit">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        
                        <div class="mb-3">
                            <label class="form-label fw-bold">活动标题 <span class="text-danger">*</span></label>
                            <InputText class="form-control" @bind-Value="activity.Title" placeholder="请输入活动标题..." required />
                        </div>
                        
                        <div class="mb-3">
                            <label class="form-label fw-bold">活动描述 <span class="text-danger">*</span></label>
                            <InputTextArea class="form-control" @bind-Value="activity.Description" rows="4" placeholder="请输入活动详细描述..." required />
                        </div>
                        
                        <div class="mb-3">
                                <label class="form-label fw-bold">活动分类 <span class="text-danger">*</span></label>
                                <InputSelect class="form-select" @bind-Value="activity.CategoryId" required>
                                    <option value="0">请选择分类</option>
                                    @foreach (var category in categories)
                                    {
                                        <option value="@category.Id">@category.Name</option>
                                    }
                                </InputSelect>
                        </div>
                        
                            <div class="mb-3">
                                <label class="form-label fw-bold">活动图片</label>
                                <ImageUpload ImageUrl="@activity.ImageUrl" ImageUrlChanged="@UpdateImageUrl" Category="@selectedCategoryName" />
                                <small class="text-muted">可上传本地图片或生成随机图片作为活动封面</small>
                            </div>
                        
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label class="form-label fw-bold">开始时间 <span class="text-danger">*</span></label>
                                <InputDate class="form-control" @bind-Value="activity.StartTime" required />
                            </div>
                            <div class="col-md-6">
                                <label class="form-label fw-bold">结束时间 <span class="text-danger">*</span></label>
                                <InputDate class="form-control" @bind-Value="activity.EndTime" required />
                            </div>
                        </div>
                            
                            <div class="mb-3">
                                <label class="form-label fw-bold">报名截止时间 <span class="text-danger">*</span></label>
                                <InputDate class="form-control" @bind-Value="activity.RegistrationDeadline" required />
                                <small class="text-muted">学生必须在此时间前完成报名</small>
                            </div>
                        
                        <div class="mb-3">
                            <label class="form-label fw-bold">活动地点 <span class="text-danger">*</span></label>
                            <InputText class="form-control" @bind-Value="activity.Location" placeholder="请输入活动地点..." required />
                        </div>
                        
                        <div class="mb-3">
                            <label class="form-label fw-bold">最大报名人数 <span class="text-danger">*</span></label>
                            <InputNumber class="form-control" @bind-Value="activity.MaxParticipants" min="1" required />
                        </div>
                        
                        <div class="d-flex gap-2">
                            <button class="btn btn-primary" type="submit" disabled="@isSaving">
                                @if (isSaving)
                                {
                                    <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                    <span>创建中...</span>
                                }
                                else
                                {
                                    <i class="oi oi-check me-2"></i>
                                    <span>创建活动</span>
                                }
                            </button>
                            <button class="btn btn-secondary" type="button" @onclick="GoBack" disabled="@isSaving">
                                <i class="oi oi-arrow-left me-2"></i>返回
                            </button>
                        </div>
                    </EditForm>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private AdminActivityDto activity = new()
    {
        StartTime = DateTime.Now.AddDays(1),
        EndTime = DateTime.Now.AddDays(1).AddHours(2),
        RegistrationDeadline = DateTime.Now.AddHours(12), // 默认12小时后截止报名
        MaxParticipants = 50,
        CategoryId = 0
    };
    private bool isSaving = false;
    private IEnumerable<ActivityCategoryDto>? categories;
    private string selectedCategoryName => categories?.FirstOrDefault(c => c.Id == activity.CategoryId)?.Name ?? "";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            categories = await AdminService.GetCategoriesAsync();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"加载分类失败: {ex.Message}");
        }
    }

    private async Task HandleValidSubmit()
    {
        if (activity.CategoryId == 0)
        {
            await JSRuntime.InvokeVoidAsync("alert", "请选择活动分类");
            return;
        }

        // 验证时间逻辑
        if (activity.StartTime <= DateTime.Now)
        {
            await JSRuntime.InvokeVoidAsync("alert", "活动开始时间必须晚于当前时间");
            return;
        }

        if (activity.EndTime <= activity.StartTime)
        {
            await JSRuntime.InvokeVoidAsync("alert", "活动结束时间必须晚于开始时间");
            return;
        }

        if (activity.RegistrationDeadline >= activity.StartTime)
        {
            await JSRuntime.InvokeVoidAsync("alert", "报名截止时间必须早于活动开始时间");
            return;
        }

        if (activity.RegistrationDeadline <= DateTime.Now)
        {
            await JSRuntime.InvokeVoidAsync("alert", "报名截止时间必须晚于当前时间");
            return;
        }

        isSaving = true;
        try
        {
            Console.WriteLine($"准备提交活动数据: {System.Text.Json.JsonSerializer.Serialize(activity)}");
            var success = await AdminService.CreateActivityAsync(activity);
            Console.WriteLine($"API调用结果: {success}");
            
            if (success)
            {
                await JSRuntime.InvokeVoidAsync("alert", "活动创建成功！");
                Navigation.NavigateTo("/manage-activities");
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "活动创建失败，请检查输入信息");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"创建活动异常: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", $"创建活动时发生错误: {ex.Message}");
        }
        finally
        {
            isSaving = false;
        }
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/manage-activities");
    }

    private void UpdateImageUrl(string? value)
    {
        activity.ImageUrl = value;
    }
} 