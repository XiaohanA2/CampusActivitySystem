@page "/schedule"
@using CampusActivity.Shared.DTOs
@using CampusActivity.Shared.Enums
@using Microsoft.AspNetCore.Components.Forms
@inject IScheduleService ScheduleService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<PageTitle>我的日程表</PageTitle>

<div class="container-fluid mt-4">
    <div class="row">
        <!-- 侧边栏 -->
        <div class="col-md-3">
            <div class="card">
                <div class="card-header">
                    <h5>日程统计</h5>
                </div>
                <div class="card-body">
                    @if (statistics != null)
                    {
                        <div class="mb-3">
                            <div class="d-flex justify-content-between">
                                <span>总日程数:</span>
                                <span class="badge bg-primary">@statistics.TotalItems</span>
                            </div>
                        </div>
                        <div class="mb-3">
                            <div class="d-flex justify-content-between">
                                <span>已完成:</span>
                                <span class="badge bg-success">@statistics.CompletedItems</span>
                            </div>
                        </div>
                        <div class="mb-3">
                            <div class="d-flex justify-content-between">
                                <span>待完成:</span>
                                <span class="badge bg-warning">@statistics.PendingItems</span>
                            </div>
                        </div>
                        <div class="mb-3">
                            <div class="d-flex justify-content-between">
                                <span>已逾期:</span>
                                <span class="badge bg-danger">@statistics.OverdueItems</span>
                            </div>
                        </div>
                        <div class="mb-3">
                            <div class="d-flex justify-content-between">
                                <span>完成率:</span>
                                <span class="badge bg-info">@statistics.CompletionRate.ToString("F1")%</span>
                            </div>
                        </div>
                    }
                    else
                    {
                        <p>加载中...</p>
                    }
                </div>
            </div>

            <div class="card mt-3">
                <div class="card-header">
                    <h5>快速操作</h5>
                </div>
                <div class="card-body">
                    <button class="btn btn-primary w-100 mb-2" @onclick="ShowCreateModal">
                        <i class="oi oi-plus"></i> 新建日程
                    </button>
                    <button class="btn btn-outline-secondary w-100 mb-2" @onclick="LoadUpcomingItems">
                        <i class="oi oi-calendar"></i> 即将到来
                    </button>
                    <button class="btn btn-outline-warning w-100 mb-2" @onclick="LoadOverdueItems">
                        <i class="oi oi-warning"></i> 逾期事项
                    </button>
                </div>
            </div>
        </div>

        <!-- 主内容区 -->
        <div class="col-md-9">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h4>我的日程</h4>
                    <div>
                        <button class="btn btn-outline-primary me-2" @onclick="LoadScheduleItems">
                            <i class="oi oi-reload"></i> 刷新
                        </button>
                        <button class="btn btn-outline-secondary" @onclick="ShowFilterModal">
                            <i class="oi oi-filter"></i> 筛选
                        </button>
                    </div>
                </div>
                <div class="card-body">
                    @if (isLoading)
                    {
                        <div class="text-center">
                            <div class="spinner-border" role="status">
                                <span class="visually-hidden">加载中...</span>
                            </div>
                        </div>
                    }
                    else if (scheduleItems?.Items?.Any() == true)
                    {
                        <div class="table-responsive">
                            <table class="table table-hover">
                                <thead>
                                    <tr>
                                        <th>标题</th>
                                        <th>类型</th>
                                        <th>优先级</th>
                                        <th>开始时间</th>
                                        <th>结束时间</th>
                                        <th>地点</th>
                                        <th>状态</th>
                                        <th>操作</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var item in scheduleItems.Items)
                                    {
                                        <tr class="@(item.IsCompleted ? "table-secondary" : "")">
                                            <td>
                                                <div class="d-flex align-items-center">
                                                    @if (item.IsCompleted)
                                                    {
                                                        <i class="oi oi-check text-success me-2"></i>
                                                    }
                                                    <span class="@(item.IsCompleted ? "text-decoration-line-through" : "")">
                                                        @item.Title
                                                    </span>
                                                </div>
                                            </td>
                                            <td>
                                                <span class="badge @GetTypeBadgeClass(item.Type)">
                                                    @GetTypeDisplayName(item.Type)
                                                </span>
                                            </td>
                                            <td>
                                                <span class="badge @GetPriorityBadgeClass(item.Priority)">
                                                    @GetPriorityDisplayName(item.Priority)
                                                </span>
                                            </td>
                                            <td>@item.StartTime.ToString("MM-dd HH:mm")</td>
                                            <td>@item.EndTime.ToString("MM-dd HH:mm")</td>
                                            <td>@(item.Location ?? "-")</td>
                                            <td>
                                                @if (item.IsCompleted)
                                                {
                                                    <span class="badge bg-success">已完成</span>
                                                }
                                                else if (item.EndTime <= DateTime.Now)
                                                {
                                                    <span class="badge bg-danger">已逾期</span>
                                                }
                                                else
                                                {
                                                    <span class="badge bg-warning">进行中</span>
                                                }
                                            </td>
                                            <td>
                                                <div class="btn-group btn-group-sm">
                                                    <button class="btn btn-outline-primary" @onclick="() => EditItem(item)">
                                                        <i class="oi oi-pencil"></i>
                                                    </button>
                                                    <button class="btn btn-outline-success" @onclick="() => ToggleCompletion(item.Id)">
                                                        <i class="oi @(item.IsCompleted ? "oi-x" : "oi-check")"></i>
                                                    </button>
                                                    <button class="btn btn-outline-danger" @onclick="() => DeleteItem(item.Id)">
                                                        <i class="oi oi-trash"></i>
                                                    </button>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>

                        <!-- 分页 -->
                        @if (scheduleItems.TotalPages > 1)
                        {
                            <nav>
                                <ul class="pagination justify-content-center">
                                    <li class="page-item @(scheduleItems.HasPreviousPage ? "" : "disabled")">
                                        <button class="page-link" @onclick="() => ChangePage(scheduleItems.PageIndex - 1)" disabled="@(!scheduleItems.HasPreviousPage)">
                                            上一页
                                        </button>
                                    </li>
                                    @for (int i = 1; i <= scheduleItems.TotalPages; i++)
                                    {
                                        <li class="page-item @(i == scheduleItems.PageIndex ? "active" : "")">
                                            <button class="page-link" @onclick="() => ChangePage(i)">@i</button>
                                        </li>
                                    }
                                    <li class="page-item @(scheduleItems.HasNextPage ? "" : "disabled")">
                                        <button class="page-link" @onclick="() => ChangePage(scheduleItems.PageIndex + 1)" disabled="@(!scheduleItems.HasNextPage)">
                                            下一页
                                        </button>
                                    </li>
                                </ul>
                            </nav>
                        }
                    }
                    else
                    {
                        <div class="text-center py-5">
                            <i class="oi oi-calendar display-1 text-muted"></i>
                            <h5 class="mt-3">暂无日程</h5>
                            <p class="text-muted">点击"新建日程"开始管理您的日程安排</p>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<!-- 创建/编辑模态框 -->
@if (showModal)
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@(editingItem == null ? "新建日程" : "编辑日程")</h5>
                    <button type="button" class="btn-close" @onclick="CloseModal"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="currentItem" OnValidSubmit="SaveItem">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label class="form-label">标题 *</label>
                                <InputText class="form-control" @bind-Value="currentItem.Title" />
                                <ValidationMessage For="@(() => currentItem.Title)" />
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">类型</label>
                                <InputSelect class="form-control" @bind-Value="currentItem.Type">
                                    <option value="@ScheduleItemType.Personal">个人计划</option>
                                    <option value="@ScheduleItemType.Activity">活动安排</option>
                                    <option value="@ScheduleItemType.Reminder">提醒事项</option>
                                    <option value="@ScheduleItemType.Meeting">会议</option>
                                    <option value="@ScheduleItemType.Study">学习</option>
                                    <option value="@ScheduleItemType.Other">其他</option>
                                </InputSelect>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label class="form-label">开始时间 *</label>
                                <input class="form-control" type="datetime-local" @bind="currentItem.StartTime" />
                                <ValidationMessage For="@(() => currentItem.StartTime)" />
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">结束时间 *</label>
                                <input class="form-control" type="datetime-local" @bind="currentItem.EndTime" />
                                <ValidationMessage For="@(() => currentItem.EndTime)" />
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label class="form-label">优先级</label>
                                <InputSelect class="form-control" @bind-Value="currentItem.Priority">
                                    <option value="@ScheduleItemPriority.Low">低</option>
                                    <option value="@ScheduleItemPriority.Medium">中</option>
                                    <option value="@ScheduleItemPriority.High">高</option>
                                    <option value="@ScheduleItemPriority.Urgent">紧急</option>
                                </InputSelect>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">地点</label>
                                <InputText class="form-control" @bind-Value="currentItem.Location" />
                            </div>
                        </div>

                        <div class="mb-3">
                            <label class="form-label">描述</label>
                            <InputTextArea class="form-control" rows="3" @bind-Value="currentItem.Description" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">备注</label>
                            <InputTextArea class="form-control" rows="2" @bind-Value="currentItem.Note" />
                        </div>

                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" @onclick="CloseModal">取消</button>
                            <button type="submit" class="btn btn-primary">保存</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

<!-- 筛选模态框 -->
@if (showFilterModal)
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">筛选日程</h5>
                    <button type="button" class="btn-close" @onclick="CloseFilterModal"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="filterDto" OnValidSubmit="ApplyFilter">
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label class="form-label">开始日期</label>
                                <input class="form-control" type="date" @bind="filterDto.StartDate" />
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">结束日期</label>
                                <input class="form-control" type="date" @bind="filterDto.EndDate" />
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label class="form-label">类型</label>
                                <InputSelect class="form-control" @bind-Value="filterDto.Type">
                                    <option value="">全部类型</option>
                                    <option value="@ScheduleItemType.Personal">个人计划</option>
                                    <option value="@ScheduleItemType.Activity">活动安排</option>
                                    <option value="@ScheduleItemType.Reminder">提醒事项</option>
                                    <option value="@ScheduleItemType.Meeting">会议</option>
                                    <option value="@ScheduleItemType.Study">学习</option>
                                    <option value="@ScheduleItemType.Other">其他</option>
                                </InputSelect>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">优先级</label>
                                <InputSelect class="form-control" @bind-Value="filterDto.Priority">
                                    <option value="">全部优先级</option>
                                    <option value="@ScheduleItemPriority.Low">低</option>
                                    <option value="@ScheduleItemPriority.Medium">中</option>
                                    <option value="@ScheduleItemPriority.High">高</option>
                                    <option value="@ScheduleItemPriority.Urgent">紧急</option>
                                </InputSelect>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label class="form-label">完成状态</label>
                                <InputSelect class="form-control" @bind-Value="filterDto.IsCompleted">
                                    <option value="">全部状态</option>
                                    <option value="true">已完成</option>
                                    <option value="false">未完成</option>
                                </InputSelect>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">关键词</label>
                                <InputText class="form-control" @bind-Value="filterDto.Keyword" placeholder="搜索标题或描述" />
                            </div>
                        </div>

                        <div class="mb-3">
                            <div class="d-flex gap-2">
                                <button type="button" class="btn btn-sm btn-outline-info" @onclick="SelectAllFilters">
                                    <i class="oi oi-check"></i> 全选条件
                                </button>
                                <button type="button" class="btn btn-sm btn-outline-warning" @onclick="ClearAllFilters">
                                    <i class="oi oi-x"></i> 清除条件
                                </button>
                            </div>
                        </div>

                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" @onclick="ResetFilter">重置</button>
                            <button type="button" class="btn btn-outline-secondary" @onclick="CloseFilterModal">取消</button>
                            <button type="submit" class="btn btn-primary">应用筛选</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    private PagedResultDto<ScheduleItemDto>? scheduleItems;
    private ScheduleStatisticsDto? statistics;
    private bool isLoading = false;
    private bool showModal = false;
    private bool showFilterModal = false;
    private ScheduleItemDto? editingItem;
    private CreateScheduleItemDto currentItem = new();
    private ScheduleSearchDto searchDto = new();
    private ScheduleSearchDto filterDto = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        isLoading = true;
        try
        {
            await Task.WhenAll(
                LoadScheduleItems(),
                LoadStatistics()
            );
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadScheduleItems()
    {
        scheduleItems = await ScheduleService.GetScheduleItemsAsync(searchDto);
    }

    private async Task LoadStatistics()
    {
        statistics = await ScheduleService.GetStatisticsAsync();
    }

    private async Task LoadUpcomingItems()
    {
        var items = await ScheduleService.GetUpcomingItemsAsync(20);
        if (items != null)
        {
            scheduleItems = new PagedResultDto<ScheduleItemDto>
            {
                Items = items.ToList(),
                TotalCount = items.Count(),
                PageIndex = 1,
                PageSize = 20
            };
        }
    }

    private async Task LoadOverdueItems()
    {
        var items = await ScheduleService.GetOverdueItemsAsync();
        if (items != null)
        {
            scheduleItems = new PagedResultDto<ScheduleItemDto>
            {
                Items = items.ToList(),
                TotalCount = items.Count(),
                PageIndex = 1,
                PageSize = 20
            };
        }
    }

    private void ShowCreateModal()
    {
        editingItem = null;
        currentItem = new CreateScheduleItemDto
        {
            StartTime = DateTime.Now,
            EndTime = DateTime.Now.AddHours(1),
            Type = ScheduleItemType.Personal,
            Priority = ScheduleItemPriority.Medium
        };
        showModal = true;
    }

    private void EditItem(ScheduleItemDto item)
    {
        editingItem = item;
        currentItem = new CreateScheduleItemDto
        {
            Title = item.Title,
            Description = item.Description,
            Location = item.Location,
            StartTime = item.StartTime,
            EndTime = item.EndTime,
            Type = item.Type,
            Priority = item.Priority,
            Color = item.Color,
            Note = item.Note,
            ActivityId = item.ActivityId
        };
        showModal = true;
    }

    private void CloseModal()
    {
        showModal = false;
        editingItem = null;
        currentItem = new();
    }

    private void ShowFilterModal()
    {
        // 将当前的搜索条件复制到筛选表单中
        filterDto = new ScheduleSearchDto
        {
            StartDate = searchDto.StartDate,
            EndDate = searchDto.EndDate,
            Type = searchDto.Type,
            Priority = searchDto.Priority,
            IsCompleted = searchDto.IsCompleted,
            Keyword = searchDto.Keyword,
            PageIndex = 1,
            PageSize = searchDto.PageSize
        };
        showFilterModal = true;
    }

    private void CloseFilterModal()
    {
        showFilterModal = false;
    }

    private async Task ApplyFilter()
    {
        // 将筛选条件应用到搜索条件
        searchDto.StartDate = filterDto.StartDate;
        searchDto.EndDate = filterDto.EndDate;
        searchDto.Type = filterDto.Type;
        searchDto.Priority = filterDto.Priority;
        searchDto.IsCompleted = filterDto.IsCompleted;
        searchDto.Keyword = filterDto.Keyword;
        searchDto.PageIndex = 1; // 重置到第一页

        CloseFilterModal();
        await LoadScheduleItems();
    }

    private async Task ResetFilter()
    {
        filterDto = new ScheduleSearchDto
        {
            PageIndex = 1,
            PageSize = searchDto.PageSize
        };
        searchDto = new ScheduleSearchDto
        {
            PageIndex = 1,
            PageSize = searchDto.PageSize
        };
        CloseFilterModal();
        await LoadScheduleItems();
    }

    private void SelectAllFilters()
    {
        filterDto.Type = ScheduleItemType.Personal; // 默认选择第一个类型
        filterDto.Priority = ScheduleItemPriority.High; // 默认选择高优先级
        filterDto.IsCompleted = false; // 默认选择未完成
        if (!filterDto.StartDate.HasValue)
            filterDto.StartDate = DateTime.Today;
        if (!filterDto.EndDate.HasValue)
            filterDto.EndDate = DateTime.Today.AddDays(7);
    }

    private void ClearAllFilters()
    {
        filterDto.StartDate = null;
        filterDto.EndDate = null;
        filterDto.Type = null;
        filterDto.Priority = null;
        filterDto.IsCompleted = null;
        filterDto.Keyword = null;
    }

    private async Task SaveItem()
    {
        try
        {
            Console.WriteLine("开始保存日程项...");
            Console.WriteLine($"标题: {currentItem.Title}");
            Console.WriteLine($"开始时间: {currentItem.StartTime}");
            Console.WriteLine($"结束时间: {currentItem.EndTime}");
            
            if (editingItem == null)
            {
                Console.WriteLine("创建新日程项...");
                var result = await ScheduleService.CreateScheduleItemAsync(currentItem);
                if (result != null)
                {
                    Console.WriteLine($"日程项创建成功，ID: {result.Id}");
                    await JSRuntime.InvokeVoidAsync("alert", "日程创建成功！");
                    CloseModal();
                    await LoadData();
                }
                else
                {
                    Console.WriteLine("日程项创建失败，返回null");
                    await JSRuntime.InvokeVoidAsync("alert", "日程创建失败，请检查网络连接或联系管理员。");
                }
            }
            else
            {
                Console.WriteLine($"更新日程项，ID: {editingItem.Id}");
                var updateDto = new UpdateScheduleItemDto
                {
                    Id = editingItem.Id,
                    Title = currentItem.Title,
                    Description = currentItem.Description,
                    Location = currentItem.Location,
                    StartTime = currentItem.StartTime,
                    EndTime = currentItem.EndTime,
                    Type = currentItem.Type,
                    Priority = currentItem.Priority,
                    Color = currentItem.Color,
                    Note = currentItem.Note,
                    ActivityId = currentItem.ActivityId,
                    IsCompleted = editingItem.IsCompleted
                };
                
                var result = await ScheduleService.UpdateScheduleItemAsync(editingItem.Id, updateDto);
                if (result != null)
                {
                    Console.WriteLine($"日程项更新成功，ID: {result.Id}");
                    await JSRuntime.InvokeVoidAsync("alert", "日程更新成功！");
                    CloseModal();
                    await LoadData();
                }
                else
                {
                    Console.WriteLine("日程项更新失败，返回null");
                    await JSRuntime.InvokeVoidAsync("alert", "日程更新失败，请检查网络连接或联系管理员。");
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"保存日程项时发生异常: {ex.Message}");
            Console.WriteLine($"异常堆栈: {ex.StackTrace}");
            await JSRuntime.InvokeVoidAsync("alert", $"保存失败: {ex.Message}");
        }
    }

    private async Task ToggleCompletion(int id)
    {
        var success = await ScheduleService.ToggleCompletionAsync(id);
        if (success)
        {
            await LoadData();
        }
    }

    private async Task DeleteItem(int id)
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", "确定要删除这个日程项吗？"))
        {
            var success = await ScheduleService.DeleteScheduleItemAsync(id);
            if (success)
            {
                await LoadData();
            }
        }
    }

    private async Task ChangePage(int pageIndex)
    {
        searchDto.PageIndex = pageIndex;
        await LoadScheduleItems();
    }

    private string GetTypeBadgeClass(ScheduleItemType type)
    {
        return type switch
        {
            ScheduleItemType.Personal => "bg-primary",
            ScheduleItemType.Activity => "bg-success",
            ScheduleItemType.Reminder => "bg-warning",
            ScheduleItemType.Meeting => "bg-info",
            ScheduleItemType.Study => "bg-secondary",
            ScheduleItemType.Other => "bg-dark",
            _ => "bg-secondary"
        };
    }

    private string GetTypeDisplayName(ScheduleItemType type)
    {
        return type switch
        {
            ScheduleItemType.Personal => "个人",
            ScheduleItemType.Activity => "活动",
            ScheduleItemType.Reminder => "提醒",
            ScheduleItemType.Meeting => "会议",
            ScheduleItemType.Study => "学习",
            ScheduleItemType.Other => "其他",
            _ => "未知"
        };
    }

    private string GetPriorityBadgeClass(ScheduleItemPriority priority)
    {
        return priority switch
        {
            ScheduleItemPriority.Low => "bg-secondary",
            ScheduleItemPriority.Medium => "bg-primary",
            ScheduleItemPriority.High => "bg-warning",
            ScheduleItemPriority.Urgent => "bg-danger",
            _ => "bg-secondary"
        };
    }

    private string GetPriorityDisplayName(ScheduleItemPriority priority)
    {
        return priority switch
        {
            ScheduleItemPriority.Low => "低",
            ScheduleItemPriority.Medium => "中",
            ScheduleItemPriority.High => "高",
            ScheduleItemPriority.Urgent => "紧急",
            _ => "未知"
        };
    }
} 