@page "/test"
@using CampusActivity.Shared.DTOs
@using CampusActivity.Shared.Enums
@inject IScheduleService ScheduleService
@inject IAuthService AuthService
@inject IAdminService AdminService
@inject IJSRuntime JSRuntime
@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>API测试</PageTitle>

<div class="container mt-4">
    <h3>API连接测试</h3>
    
    <div class="row">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h5>认证状态</h5>
                </div>
                <div class="card-body">
                    <p>认证状态: @(isAuthenticated ? "已登录" : "未登录")</p>
                    <p>当前用户: @(currentUser?.FullName ?? "未知")</p>
                    <p>用户ID: @(currentUser?.Id ?? 0)</p>
                    <p>Token: @(token?.Substring(0, Math.Min(50, token?.Length ?? 0)) ?? "无")...</p>
                </div>
            </div>
        </div>
        
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h5>API测试</h5>
                </div>
                <div class="card-body">
                    <button class="btn btn-primary mb-2" @onclick="TestGetScheduleItems">
                        测试获取日程列表
                    </button>
                    <br />
                    <button class="btn btn-success mb-2" @onclick="TestCreateScheduleItem">
                        测试创建日程
                    </button>
                    <br />
                    <button class="btn btn-info" @onclick="TestGetStatistics">
                        测试获取统计
                    </button>
                    <br />
                    <button class="btn btn-warning" @onclick="TestCreateActivity">
                        测试创建活动
                    </button>
                </div>
            </div>
        </div>
    </div>
    
    <div class="card mb-4">
        <div class="card-header">
            <h5>用户认证信息</h5>
        </div>
        <div class="card-body">
            <div class="mb-3">
                <button class="btn btn-primary" @onclick="RefreshAuthState">刷新认证状态</button>
                <button class="btn btn-secondary" @onclick="ClearAuthData">清除认证数据</button>
                <button class="btn btn-success" @onclick="TestLoginWithAdmin2">使用admin2登录</button>
            </div>
            
            <AuthorizeView>
                <Authorized>
                    <p><strong>用户名:</strong> @context.User.Identity?.Name</p>
                    <p><strong>用户ID:</strong> @context.User.FindFirst(ClaimTypes.NameIdentifier)?.Value</p>
                    <p><strong>邮箱:</strong> @context.User.FindFirst(ClaimTypes.Email)?.Value</p>
                    <p><strong>姓名:</strong> @context.User.FindFirst("FullName")?.Value</p>
                    <p><strong>角色:</strong> @context.User.FindFirst(ClaimTypes.Role)?.Value</p>
                    
                    <h6>所有声明:</h6>
                    <ul>
                        @foreach (var claim in context.User.Claims)
                        {
                            <li><strong>@claim.Type:</strong> @claim.Value</li>
                        }
                    </ul>
                    
                    <div class="mt-3">
                        <h6>权限测试:</h6>
                        <AuthorizeView Roles="Student" Context="studentContext">
                            <Authorized>
                                <div class="alert alert-success">✅ 学生权限验证通过</div>
                            </Authorized>
                            <NotAuthorized>
                                <div class="alert alert-warning">❌ 学生权限验证失败</div>
                            </NotAuthorized>
                        </AuthorizeView>
                        
                        <AuthorizeView Roles="Teacher" Context="teacherContext">
                            <Authorized>
                                <div class="alert alert-success">✅ 教师权限验证通过</div>
                            </Authorized>
                            <NotAuthorized>
                                <div class="alert alert-warning">❌ 教师权限验证失败</div>
                            </NotAuthorized>
                        </AuthorizeView>
                        
                        <AuthorizeView Roles="Admin" Context="adminContext">
                            <Authorized>
                                <div class="alert alert-success">✅ 管理员权限验证通过</div>
                            </Authorized>
                            <NotAuthorized>
                                <div class="alert alert-warning">❌ 管理员权限验证失败</div>
                            </NotAuthorized>
                        </AuthorizeView>
                    </div>
                </Authorized>
                <NotAuthorized>
                    <div class="alert alert-warning">用户未登录</div>
                </NotAuthorized>
            </AuthorizeView>
        </div>
    </div>

    @if (!string.IsNullOrEmpty(testResult))
    {
        <div class="row mt-3">
            <div class="col-12">
                <div class="card">
                    <div class="card-header">
                        <h5>测试结果</h5>
                    </div>
                    <div class="card-body">
                        <pre>@testResult</pre>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private bool isAuthenticated = false;
    private UserDto? currentUser;
    private string? token;
    private string testResult = "";

    protected override async Task OnInitializedAsync()
    {
        // 不在预渲染阶段访问localStorage
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadAuthInfo();
            StateHasChanged();
        }
    }

    private async Task LoadAuthInfo()
    {
        try
        {
            isAuthenticated = await AuthService.IsAuthenticatedAsync();
            if (isAuthenticated)
            {
                currentUser = await AuthService.GetCurrentUserAsync();
                token = await AuthService.GetTokenAsync();
            }
        }
        catch (Exception ex)
        {
            testResult += $"加载认证信息时出错: {ex.Message}\n";
        }
    }

    private async Task TestGetScheduleItems()
    {
        try
        {
            testResult = "正在测试获取日程列表...\n";
            StateHasChanged();
            
            var searchDto = new ScheduleSearchDto { PageIndex = 1, PageSize = 10 };
            var result = await ScheduleService.GetScheduleItemsAsync(searchDto);
            
            if (result != null)
            {
                testResult += $"成功获取日程列表，共 {result.TotalCount} 项\n";
                testResult += $"当前页: {result.PageIndex}, 页大小: {result.PageSize}\n";
                if (result.Items?.Any() == true)
                {
                    testResult += "日程项:\n";
                    foreach (var item in result.Items.Take(3))
                    {
                        testResult += $"- {item.Title} ({item.StartTime:yyyy-MM-dd HH:mm})\n";
                    }
                }
            }
            else
            {
                testResult += "获取日程列表失败，返回null\n";
            }
        }
        catch (Exception ex)
        {
            testResult += $"测试失败: {ex.Message}\n";
            testResult += $"堆栈: {ex.StackTrace}\n";
        }
        
        StateHasChanged();
    }

    private async Task TestCreateScheduleItem()
    {
        try
        {
            testResult = "正在测试创建日程...\n";
            StateHasChanged();
            
            var createDto = new CreateScheduleItemDto
            {
                Title = "测试日程 " + DateTime.Now.ToString("HH:mm:ss"),
                Description = "这是一个测试日程",
                StartTime = DateTime.Now.AddHours(1),
                EndTime = DateTime.Now.AddHours(2),
                Type = ScheduleItemType.Personal,
                Priority = ScheduleItemPriority.Medium
            };
            
            var result = await ScheduleService.CreateScheduleItemAsync(createDto);
            
            if (result != null)
            {
                testResult += $"成功创建日程，ID: {result.Id}\n";
                testResult += $"标题: {result.Title}\n";
                testResult += $"开始时间: {result.StartTime}\n";
                testResult += $"结束时间: {result.EndTime}\n";
            }
            else
            {
                testResult += "创建日程失败，返回null\n";
            }
        }
        catch (Exception ex)
        {
            testResult += $"测试失败: {ex.Message}\n";
            testResult += $"堆栈: {ex.StackTrace}\n";
        }
        
        StateHasChanged();
    }

    private async Task TestGetStatistics()
    {
        try
        {
            testResult = "正在测试获取统计...\n";
            StateHasChanged();
            
            var result = await ScheduleService.GetStatisticsAsync();
            
            if (result != null)
            {
                testResult += $"成功获取统计信息\n";
                testResult += $"总日程数: {result.TotalItems}\n";
                testResult += $"已完成: {result.CompletedItems}\n";
                testResult += $"待完成: {result.PendingItems}\n";
                testResult += $"已逾期: {result.OverdueItems}\n";
                testResult += $"完成率: {result.CompletionRate:F1}%\n";
            }
            else
            {
                testResult += "获取统计失败，返回null\n";
            }
        }
        catch (Exception ex)
        {
            testResult += $"测试失败: {ex.Message}\n";
            testResult += $"堆栈: {ex.StackTrace}\n";
        }
        
        StateHasChanged();
    }

    private async Task TestApi()
    {
        testResult = "正在测试API连接...\n";
        
        try
        {
            var client = new HttpClient();
            client.BaseAddress = new Uri("http://localhost:7186/");
            
            var response = await client.GetAsync("api/activities");
            testResult += $"API响应状态: {response.StatusCode}\n";
            
            if (response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadAsStringAsync();
                testResult += $"API响应内容: {content.Substring(0, Math.Min(200, content.Length))}...\n";
            }
        }
        catch (Exception ex)
        {
            testResult += $"API测试失败: {ex.Message}\n";
        }
    }

    private async Task RefreshAuthState()
    {
        await LoadAuthInfo();
        
        // 检查本地存储中的token
        try
        {
            var token = await AuthService.GetTokenAsync();
            if (!string.IsNullOrEmpty(token))
            {
                testResult += $"本地存储中的Token: {token.Substring(0, Math.Min(50, token.Length))}...\n";
                
                // 解析token
                var handler = new System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler();
                var jsonToken = handler.ReadJwtToken(token);
                
                testResult += $"Token过期时间: {jsonToken.ValidTo}\n";
                testResult += $"当前时间: {DateTime.UtcNow}\n";
                testResult += $"Token是否过期: {jsonToken.ValidTo < DateTime.UtcNow}\n";
                
                foreach (var claim in jsonToken.Claims)
                {
                    testResult += $"Claim: {claim.Type} = {claim.Value}\n";
                }
            }
            else
            {
                testResult += "本地存储中没有找到Token\n";
            }
        }
        catch (Exception ex)
        {
            testResult += $"检查Token时出错: {ex.Message}\n";
        }
        
        StateHasChanged();
    }

    private void ClearAuthData()
    {
        isAuthenticated = false;
        currentUser = null;
        token = null;
    }

    private async Task TestLoginWithAdmin2()
    {
        try
        {
            testResult = "正在使用admin2账号登录...\n";
            StateHasChanged();
            
            var loginDto = new LoginDto
            {
                Username = "admin2",
                Password = "admin123"
            };
            
            var result = await AuthService.LoginAsync(loginDto);
            
            if (result != null)
            {
                testResult += "登录成功！\n";
                testResult += $"用户名: {result.User.Username}\n";
                testResult += $"角色: {result.User.Role}\n";
                testResult += $"Token: {result.Token.Substring(0, Math.Min(50, result.Token.Length))}...\n";
                
                // 刷新认证状态
                await RefreshAuthState();
            }
            else
            {
                testResult += "登录失败！\n";
            }
        }
        catch (Exception ex)
        {
            testResult += $"登录出错: {ex.Message}\n";
        }
        
        StateHasChanged();
    }

    private async Task TestCreateActivity()
    {
        try
        {
            var testActivity = new AdminActivityDto
            {
                Title = "测试活动",
                Description = "这是一个测试活动",
                StartTime = DateTime.Now.AddDays(1),
                EndTime = DateTime.Now.AddDays(1).AddHours(2),
                Location = "测试地点",
                MaxParticipants = 10,
                Category = "学术讲座"
            };

            Console.WriteLine($"测试创建活动数据: {System.Text.Json.JsonSerializer.Serialize(testActivity)}");
            var result = await AdminService.CreateActivityAsync(testActivity);
            Console.WriteLine($"测试创建活动结果: {result}");
            
            testResult += $"\n测试创建活动结果: {result}";
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"测试创建活动异常: {ex.Message}");
            testResult += $"\n测试创建活动异常: {ex.Message}";
            StateHasChanged();
        }
    }
} 