@page "/api-test"
@using System.Text
@using System.Text.Json
@using CampusActivity.Shared.DTOs
@using CampusActivity.Shared.Enums
@using CampusActivity.BlazorWeb.Services
@inject HttpClient Http
@inject IConfiguration Config
@inject IAuthService AuthService
@inject IHttpClientFactory HttpClientFactory

<PageTitle>API连接测试</PageTitle>

<div class="container-fluid">
    <h3>API连接测试</h3>
    
    <div class="alert alert-info">
        <h6>使用说明：</h6>
        <ul class="mb-0">
            <li><strong>公开API：</strong>无需登录，测试基础连接和公开接口</li>
            <li><strong>认证API：</strong>需要先登录，然后测试需要认证的接口</li>
            <li><strong>默认测试账号：</strong>用户名 admin，密码 admin123</li>
            <li><strong>测试结果：</strong>绿色表示成功，红色表示失败，黄色表示警告</li>
        </ul>
    </div>

    <div class="row">
        <div class="col-md-4">
            <div class="card">
                <div class="card-header">
                    <h5>配置信息</h5>
                </div>
                <div class="card-body">
                    <p><strong>API基础URL:</strong> @apiBaseUrl</p>
                    <p><strong>当前时间:</strong> @DateTime.Now</p>
                    <p><strong>认证状态:</strong> @(isAuthenticated ? "已登录" : "未登录")</p>
                    
                    @if (!isAuthenticated)
                    {
                        <div class="mb-3">
                            <h6>测试用户登录</h6>
                            <div class="input-group mb-2">
                                <input type="text" class="form-control" placeholder="用户名" @bind="testUsername" />
                                <input type="password" class="form-control" placeholder="密码" @bind="testPassword" />
                                <button class="btn btn-primary" @onclick="TestLogin">登录</button>
                            </div>
                        </div>
                    }
                    else
                    {
                        <button class="btn btn-warning" @onclick="Logout">登出</button>
                    }
                </div>
            </div>

            <div class="card mt-3">
                <div class="card-header">
                    <h5>批量测试</h5>
                </div>
                <div class="card-body">
                    <button class="btn btn-success w-100 mb-2" @onclick="TestAllApis" disabled="@isTesting">
                        @if (isTesting)
                        {
                            <span class="spinner-border spinner-border-sm me-2"></span>
                        }
                        测试所有API
                    </button>
                    <button class="btn btn-info w-100 mb-2" @onclick="TestPublicApis" disabled="@isTesting">
                        测试公开API
                    </button>
                    <button class="btn btn-warning w-100 mb-2" @onclick="TestScheduleCompleteFlow" disabled="@(!isAuthenticated || isTesting)">
                        日程表完整流程测试
                    </button>
                    <button class="btn btn-warning w-100 mb-2" @onclick="TestActivityScheduleIntegration" disabled="@(!isAuthenticated || isTesting)">
                        活动日程集成测试
                    </button>
                    <button class="btn btn-warning w-100 mb-2" @onclick="TestRecommendationCompleteFlow" disabled="@(!isAuthenticated || isTesting)">
                        推荐系统完整测试
                    </button>
                    <button class="btn btn-secondary w-100" @onclick="ClearLogs">清空日志</button>
                </div>
            </div>
        </div>

        <div class="col-md-8">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5>测试结果</h5>
                    <span class="badge bg-primary">@testLogs.Count 条记录</span>
                </div>
                <div class="card-body">
                    <div class="border p-3" style="height: 600px; overflow-y: auto; background-color: #f8f9fa;">
                        @if (testLogs.Count == 0)
                        {
                            <div class="text-muted text-center">暂无测试记录</div>
                        }
                        else
                        {
                            @foreach (var log in testLogs)
                            {
                                <div class="small mb-1">
                                    <span class="text-muted">[@log.Timestamp:HH:mm:ss]</span>
                                    <span class="@GetLogClass(log.Type)">@log.Message</span>
                                </div>
                            }
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- API测试按钮区域 -->
    <div class="row mt-4">
        <!-- 公开API测试 -->
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h5>公开API测试</h5>
                </div>
                <div class="card-body">
                    <div class="d-grid gap-2">
                        <button class="btn btn-outline-success" @onclick="TestBasicConnection" disabled="@isTesting">
                            基础连接测试
                        </button>
                        <button class="btn btn-outline-success" @onclick="TestHealthCheck" disabled="@isTesting">
                            健康检查
                        </button>
                        <button class="btn btn-outline-success" @onclick="TestDatabaseConnection" disabled="@isTesting">
                            数据库连接测试
                        </button>
                        <button class="btn btn-outline-success" @onclick="TestDatabaseStatus" disabled="@isTesting">
                            数据库状态检查
                        </button>
                        <button class="btn btn-outline-success" @onclick="TestGetActivities" disabled="@isTesting">
                            获取活动列表
                        </button>
                        <button class="btn btn-outline-success" @onclick="TestGetCategories" disabled="@isTesting">
                            获取活动分类
                        </button>
                        <button class="btn btn-outline-success" @onclick="TestGetPopularActivities" disabled="@isTesting">
                            获取热门活动
                        </button>
                        <button class="btn btn-outline-success" @onclick="TestWebApiStatus" disabled="@isTesting">
                            WebAPI状态检查
                        </button>
                        <button class="btn btn-outline-success" @onclick="TestHttpClientConfig" disabled="@isTesting">
                            HTTP客户端配置测试
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <!-- 认证API测试 -->
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h5>认证API测试</h5>
                </div>
                <div class="card-body">
                    <div class="d-grid gap-2">
                        <button class="btn btn-outline-primary" @onclick="TestLogin" disabled="@isTesting">
                            测试登录
                        </button>
                        <button class="btn btn-outline-primary" @onclick="TestAuthentication" disabled="@isTesting">
                            认证状态测试
                        </button>
                        <button class="btn btn-outline-primary" @onclick="TestLocalStorageToken" disabled="@isTesting">
                            测试LocalStorage
                        </button>
                        <button class="btn btn-outline-primary" @onclick="TestGetUserProfile" disabled="@(!isAuthenticated || isTesting)">
                            获取用户资料
                        </button>
                        <button class="btn btn-outline-primary" @onclick="TestRegisterApi" disabled="@(!isAuthenticated || isTesting)">
                            用户注册测试
                        </button>
                        <button class="btn btn-outline-primary" @onclick="TestGetMyRegistrations" disabled="@(!isAuthenticated || isTesting)">
                            获取我的报名活动
                        </button>
                        <button class="btn btn-outline-primary" @onclick="TestCreateActivityApi" disabled="@(!isAuthenticated || isTesting)">
                            创建活动测试
                        </button>
                        <button class="btn btn-outline-primary" @onclick="TestAiApiTimeout" disabled="@(!isAuthenticated || isTesting)">
                            AI API超时测试
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- 日程表API测试 -->
    <div class="row mt-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h5>日程表API测试</h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-4">
                            <h6>基础操作</h6>
                            <div class="d-grid gap-2">
                                <button class="btn btn-outline-info" @onclick="TestCreateScheduleApi" disabled="@(!isAuthenticated || isTesting)">
                                    创建日程项
                                </button>
                                <button class="btn btn-outline-info" @onclick="TestGetScheduleList" disabled="@(!isAuthenticated || isTesting)">
                                    获取日程列表
                                </button>
                                <button class="btn btn-outline-info" @onclick="TestUpdateScheduleApi" disabled="@(!isAuthenticated || isTesting)">
                                    更新日程项
                                </button>
                                <button class="btn btn-outline-info" @onclick="TestDeleteScheduleApi" disabled="@(!isAuthenticated || isTesting)">
                                    删除日程项
                                </button>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <h6>状态管理</h6>
                            <div class="d-grid gap-2">
                                <button class="btn btn-outline-info" @onclick="TestToggleCompletionApi" disabled="@(!isAuthenticated || isTesting)">
                                    切换完成状态
                                </button>
                                <button class="btn btn-outline-info" @onclick="TestGetUpcomingItems" disabled="@(!isAuthenticated || isTesting)">
                                    获取即将到来的日程
                                </button>
                                <button class="btn btn-outline-info" @onclick="TestGetOverdueItems" disabled="@(!isAuthenticated || isTesting)">
                                    获取逾期日程
                                </button>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <h6>视图和统计</h6>
                            <div class="d-grid gap-2">
                                <button class="btn btn-outline-info" @onclick="TestCalendarViewApi" disabled="@(!isAuthenticated || isTesting)">
                                    获取日历视图
                                </button>
                                <button class="btn btn-outline-info" @onclick="TestGetScheduleStatistics" disabled="@(!isAuthenticated || isTesting)">
                                    获取日程统计
                                </button>
                                <button class="btn btn-outline-info" @onclick="TestAddActivityToScheduleApi" disabled="@(!isAuthenticated || isTesting)">
                                    添加活动到日程
                                </button>
                                <button class="btn btn-outline-info" @onclick="TestRemoveActivityFromScheduleApi" disabled="@(!isAuthenticated || isTesting)">
                                    从日程移除活动
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- 推荐系统API测试 -->
    <div class="row mt-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h5>推荐系统API测试</h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-3">
                            <h6>基础推荐</h6>
                            <div class="d-grid gap-2">
                                <button class="btn btn-outline-info" @onclick="TestGetPersonalizedRecommendations" disabled="@(!isAuthenticated || isTesting)">
                                    个性化推荐
                                </button>
                                <button class="btn btn-outline-info" @onclick="TestGetCollaborativeRecommendations" disabled="@(!isAuthenticated || isTesting)">
                                    协同过滤推荐
                                </button>
                                <button class="btn btn-outline-info" @onclick="TestGetContentBasedRecommendations" disabled="@(!isAuthenticated || isTesting)">
                                    基于内容的推荐
                                </button>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <h6>用户偏好</h6>
                            <div class="d-grid gap-2">
                                <button class="btn btn-outline-info" @onclick="TestGetUserPreferences" disabled="@(!isAuthenticated || isTesting)">
                                    获取用户偏好
                                </button>
                                <button class="btn btn-outline-warning" @onclick="TestUpdateUserPreference" disabled="@(!isAuthenticated || isTesting)">
                                    更新用户偏好
                                </button>
                                <button class="btn btn-outline-success" @onclick="TestRecalculateRecommendations" disabled="@(!isAuthenticated || isTesting)">
                                    重新计算推荐
                                </button>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <h6>诊断测试</h6>
                            <div class="d-grid gap-2">
                                <button class="btn btn-outline-warning" @onclick="TestRecommendationBasicConnection" disabled="@(!isAuthenticated || isTesting)">
                                    推荐系统连接测试
                                </button>
                                <button class="btn btn-outline-warning" @onclick="TestRecommendationDiagnostics" disabled="@(!isAuthenticated || isTesting)">
                                    推荐系统诊断测试
                                </button>
                                <button class="btn btn-outline-warning" @onclick="TestRecommendationRoutes" disabled="@(!isAuthenticated || isTesting)">
                                    推荐系统路由测试
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private string apiBaseUrl = "";
    private List<TestLog> testLogs = new();
    private bool isAuthenticated = false;
    private bool isTesting = false;
    private string testUsername = "yyk";
    private string testPassword = "040228";
    private int? createdScheduleId = null;
    private int? createdActivityId = null;

    protected override async Task OnInitializedAsync()
    {
        apiBaseUrl = Config["ApiSettings:BaseUrl"] ?? "未配置";
        isAuthenticated = await AuthService.IsAuthenticatedAsync();
        AddLog("页面初始化完成", LogType.Info);
        AddLog($"API基础URL: {apiBaseUrl}", LogType.Info);
        AddLog($"认证状态: {(isAuthenticated ? "已登录" : "未登录")}", LogType.Info);
    }

    private async Task TestLogin()
    {
        AddLog("开始测试用户登录...", LogType.Info);
        
        try
        {
            var loginDto = new LoginDto
            {
                Username = testUsername,
                Password = testPassword
            };
            
            AddLog($"尝试登录用户: {testUsername}", LogType.Info);
            
            var result = await AuthService.LoginAsync(loginDto);
            if (result != null)
            {
                isAuthenticated = true;
                AddLog($"✅ 登录成功！用户: {result.User.FullName} ({result.User.Role})", LogType.Success);
                AddLog($"Token: {result.Token.Substring(0, Math.Min(50, result.Token.Length))}...", LogType.Info);
                
                // 解析新生成的token
                await DecodeJwtToken(result.Token);
            }
            else
            {
                AddLog("❌ 登录失败：用户名或密码错误", LogType.Error);
                isAuthenticated = false;
            }
        }
        catch (Exception ex)
        {
            AddLog($"❌ 登录测试失败: {ex.Message}", LogType.Error);
            isAuthenticated = false;
        }
    }

    private async Task Logout()
    {
        await AuthService.LogoutAsync();
        isAuthenticated = false;
        AddLog("已登出", LogType.Info);
    }

    private async Task TestAllApis()
    {
        isTesting = true;
        AddLog("开始测试所有API...", LogType.Info);
        
        try
        {
            // 测试公开API
            await TestPublicApis();
            
            // 如果未登录，先尝试登录
            if (!isAuthenticated)
            {
                await TestLogin();
            }
            
            if (isAuthenticated)
            {
                // 测试需要认证的API
                await TestAuthApis();
                await TestActivityApis();
                await TestScheduleApis();
                await TestRecommendationApis();
            }
            else
            {
                AddLog("无法测试需要认证的API：未登录", LogType.Warning);
            }
        }
        finally
        {
            isTesting = false;
            AddLog("所有API测试完成", LogType.Info);
        }
    }

    private async Task TestPublicApis()
    {
        AddLog("=== 测试公开API ===", LogType.Info);
        
        var client = HttpClientFactory.CreateClient("CampusActivityAPI");
        
        // 测试基础连接
        await TestApiEndpoint(client, "GET", "api/test", "基础连接测试");
        await TestApiEndpoint(client, "GET", "api/test/health", "健康检查");
        
        // 测试数据库连接
        await TestApiEndpoint(client, "GET", "api/test/database", "数据库连接测试");
        await TestApiEndpoint(client, "GET", "api/test/status", "数据库状态检查");
        await TestApiEndpoint(client, "GET", "api/test/categories", "数据库分类查询测试");
        await TestApiEndpoint(client, "GET", "api/test/activities", "数据库活动查询测试");
        
        // 测试活动相关公开API
        await TestApiEndpoint(client, "GET", "api/activities?pageIndex=1&pageSize=5", "获取活动列表");
        await TestApiEndpoint(client, "GET", "api/activities/categories", "获取活动分类");
        await TestApiEndpoint(client, "GET", "api/activities/popular?count=5", "获取热门活动");
    }

    private async Task TestAuthApis()
    {
        AddLog("=== 测试认证API ===", LogType.Info);
        
        var client = HttpClientFactory.CreateClient("CampusActivityAPI");
        await SetAuthHeader(client);
        
        await TestApiEndpoint(client, "GET", "api/auth/profile", "获取用户资料");
        
        // 测试注册（可能会失败，因为用户可能已存在）
        var registerDto = new RegisterDto
        {
            Username = $"testuser_{DateTime.Now.Ticks}",
            Password = "test123",
            Email = $"test{DateTime.Now.Ticks}@test.com",
            FullName = "测试用户",
            Role = UserRole.Student
        };
        await TestApiEndpoint(client, "POST", "api/auth/register", "用户注册", registerDto);
    }

    private async Task TestActivityApis()
    {
        AddLog("=== 测试活动管理API ===", LogType.Info);
        
        var client = HttpClientFactory.CreateClient("CampusActivityAPI");
        await SetAuthHeader(client);
        
        // 获取活动列表
        await TestApiEndpoint(client, "GET", "api/activities?pageIndex=1&pageSize=5", "获取活动列表（认证）");
        
        // 获取我的报名活动
        await TestApiEndpoint(client, "GET", "api/activities/my-registrations", "获取我的报名活动");
        
        // 测试创建活动（需要教师或管理员权限）
        var createActivityDto = new CreateActivityDto
        {
            Title = $"测试活动 {DateTime.Now:yyyy-MM-dd HH:mm}",
            Description = "这是一个测试活动",
            StartTime = DateTime.Now.AddDays(1),
            EndTime = DateTime.Now.AddDays(1).AddHours(2),
            RegistrationDeadline = DateTime.Now.AddHours(12),
            Location = "测试地点",
            MaxParticipants = 50,
            CategoryId = 1
        };
        await TestApiEndpoint(client, "POST", "api/activities", "创建活动", createActivityDto);
    }

    private async Task TestScheduleApis()
    {
        AddLog("=== 测试日程表API ===", LogType.Info);
        
        var client = HttpClientFactory.CreateClient("CampusActivityAPI");
        await SetAuthHeader(client);
        
        // 创建日程项
        var createScheduleDto = new CreateScheduleItemDto
        {
            Title = $"测试日程 {DateTime.Now:yyyy-MM-dd HH:mm}",
            Description = "这是一个测试日程项",
            StartTime = DateTime.Now.AddDays(1),
            EndTime = DateTime.Now.AddDays(1).AddHours(1),
            Type = ScheduleItemType.Personal,
            Priority = ScheduleItemPriority.Medium,
            Location = "测试地点"
        };
        await TestApiEndpoint(client, "POST", "api/schedule", "创建日程项", createScheduleDto);
        
        // 获取日程列表
        await TestApiEndpoint(client, "GET", "api/schedule?pageIndex=1&pageSize=5", "获取日程列表");
        
        // 获取即将到来的日程
        await TestApiEndpoint(client, "GET", "api/schedule/upcoming?count=5", "获取即将到来的日程");
        
        // 获取逾期日程
        await TestApiEndpoint(client, "GET", "api/schedule/overdue", "获取逾期日程");
        
        // 获取日历视图
        var startDate = DateTime.Now.Date;
        var endDate = startDate.AddDays(7);
        await TestApiEndpoint(client, "GET", $"api/schedule/calendar?startDate={startDate:yyyy-MM-dd}&endDate={endDate:yyyy-MM-dd}", "获取日历视图");
        
        // 获取日程统计
        await TestApiEndpoint(client, "GET", "api/schedule/statistics", "获取日程统计");
    }

    private async Task TestRecommendationApis()
    {
        AddLog("=== 测试推荐系统API ===", LogType.Info);
        
        var client = HttpClientFactory.CreateClient("CampusActivityAPI");
        await SetAuthHeader(client);
        
        await TestApiEndpoint(client, "GET", "api/recommendations?count=5", "获取个性化推荐");
        await TestApiEndpoint(client, "GET", "api/recommendations/collaborative?count=5", "获取协同过滤推荐");
        await TestApiEndpoint(client, "GET", "api/recommendations/content-based?count=5", "获取基于内容的推荐");
        await TestApiEndpoint(client, "GET", "api/recommendations/preferences", "获取用户偏好");
        
        // 测试更新用户偏好
        await TestUpdateUserPreference();
        
        await TestRecalculateRecommendations();
    }

    // 单个API测试方法
    private async Task TestSingleApi(string method, string endpoint, string description, object? data = null)
    {
        isTesting = true;
        try
        {
            var client = HttpClientFactory.CreateClient("CampusActivityAPI");
            
            // 直接调用TestApiEndpoint，让它统一处理认证头设置
            await TestApiEndpoint(client, method, endpoint, description, data);
        }
        finally
        {
            isTesting = false;
        }
    }

    private async Task TestApiEndpoint(HttpClient client, string method, string endpoint, string description, object? data = null)
    {
        try
        {
            AddLog($"测试 {method} {endpoint} - {description}", LogType.Info);
            AddLog($"HTTP客户端BaseAddress: {client.BaseAddress}", LogType.Info);
            
            // 对于需要认证的API，尝试设置认证头
            if (endpoint.StartsWith("api/auth/") || endpoint.StartsWith("api/activities/") || 
                endpoint.StartsWith("api/schedule") || endpoint.StartsWith("api/recommendations"))
            {
                AddLog("检测到需要认证的API，开始设置认证头...", LogType.Info);
                await SetAuthHeader(client);
                
                // 验证认证头是否设置成功
                var authHeader = client.DefaultRequestHeaders.Authorization;
                if (authHeader != null)
                {
                    AddLog($"✅ 认证头已设置: {authHeader.Scheme} {authHeader.Parameter?.Substring(0, Math.Min(50, authHeader.Parameter.Length))}...", LogType.Success);
                }
                else
                {
                    AddLog("❌ 认证头未设置", LogType.Error);
                }
            }
            else
            {
                AddLog("此API不需要认证", LogType.Info);
            }
            
            HttpResponseMessage response;
            string requestBody = "";
            
            if (data != null)
            {
                var json = System.Text.Json.JsonSerializer.Serialize(data);
                requestBody = json;
                var content = new StringContent(json, System.Text.Encoding.UTF8, "application/json");
                
                response = method.ToUpper() switch
                {
                    "POST" => await client.PostAsync(endpoint, content),
                    "PUT" => await client.PutAsync(endpoint, content),
                    "DELETE" => await client.DeleteAsync(endpoint),
                    _ => await client.GetAsync(endpoint)
                };
            }
            else
            {
                response = method.ToUpper() switch
                {
                    "GET" => await client.GetAsync(endpoint),
                    "DELETE" => await client.DeleteAsync(endpoint),
                    _ => await client.GetAsync(endpoint)
                };
            }
            
            var responseContent = await response.Content.ReadAsStringAsync();
            var statusCode = response.StatusCode;
            
            if (response.IsSuccessStatusCode)
            {
                AddLog($"✅ {description} 成功 ({(int)statusCode})", LogType.Success);
                
                // 如果是创建操作，尝试获取创建的ID
                if (method.ToUpper() == "POST" && !string.IsNullOrEmpty(responseContent))
                {
                    try
                    {
                        // 尝试解析日程项
                        if (endpoint.Contains("schedule"))
                        {
                            var scheduleResult = System.Text.Json.JsonSerializer.Deserialize<ScheduleItemDto>(responseContent);
                            if (scheduleResult != null)
                            {
                                createdScheduleId = scheduleResult.Id;
                                AddLog($"创建的日程项ID: {createdScheduleId}", LogType.Info);
                            }
                        }
                        // 尝试解析活动
                        else if (endpoint.Contains("activities") && !endpoint.Contains("my-registrations"))
                        {
                            var activityResult = System.Text.Json.JsonSerializer.Deserialize<ActivityDto>(responseContent);
                            if (activityResult != null)
                            {
                                createdActivityId = activityResult.Id;
                                AddLog($"创建的活动ID: {createdActivityId}", LogType.Info);
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        AddLog($"解析响应数据失败: {ex.Message}", LogType.Warning);
                    }
                }
                
                if (!string.IsNullOrEmpty(responseContent) && responseContent.Length < 200)
                {
                    AddLog($"响应: {responseContent}", LogType.Info);
                }
            }
            else
            {
                AddLog($"❌ {description} 失败 ({(int)statusCode}): {responseContent}", LogType.Error);
                
                // 如果是401错误，提示用户重新登录
                if (statusCode == System.Net.HttpStatusCode.Unauthorized)
                {
                    AddLog("提示: 请先登录或重新登录", LogType.Warning);
                }
            }
        }
        catch (Exception ex)
        {
            AddLog($"❌ {description} 异常: {ex.Message}", LogType.Error);
        }
    }

    // 日程表相关测试方法
    private async Task TestCreateScheduleApi()
    {
        var createScheduleDto = new CreateScheduleItemDto
        {
            Title = $"测试日程 {DateTime.Now:yyyy-MM-dd HH:mm}",
            Description = "这是一个测试日程项",
            StartTime = DateTime.Now.AddDays(1),
            EndTime = DateTime.Now.AddDays(1).AddHours(1),
            Type = ScheduleItemType.Personal,
            Priority = ScheduleItemPriority.Medium,
            Location = "测试地点"
        };
        await TestSingleApi("POST", "api/schedule", "创建日程项", createScheduleDto);
    }

    private async Task TestUpdateScheduleApi()
    {
        if (createdScheduleId.HasValue)
        {
            var updateScheduleDto = new UpdateScheduleItemDto
            {
                Id = createdScheduleId.Value,
                Title = $"更新后的日程 {DateTime.Now:yyyy-MM-dd HH:mm}",
                Description = "这是更新后的日程项",
                StartTime = DateTime.Now.AddDays(2),
                EndTime = DateTime.Now.AddDays(2).AddHours(1),
                Type = ScheduleItemType.Personal,
                Priority = ScheduleItemPriority.High,
                Location = "更新后的地点",
                IsCompleted = false
            };
            await TestSingleApi("PUT", $"api/schedule/{createdScheduleId.Value}", "更新日程项", updateScheduleDto);
        }
        else
        {
            AddLog("请先创建日程项再进行更新测试", LogType.Warning);
        }
    }

    private async Task TestDeleteScheduleApi()
    {
        if (createdScheduleId.HasValue)
        {
            await TestSingleApi("DELETE", $"api/schedule/{createdScheduleId.Value}", "删除日程项");
            createdScheduleId = null;
        }
        else
        {
            AddLog("请先创建日程项再进行删除测试", LogType.Warning);
        }
    }

    private async Task TestToggleCompletionApi()
    {
        if (createdScheduleId.HasValue)
        {
            await TestSingleApi("POST", $"api/schedule/{createdScheduleId.Value}/toggle-completion", "切换完成状态");
        }
        else
        {
            AddLog("请先创建日程项再进行状态切换测试", LogType.Warning);
        }
    }

    private async Task TestCalendarViewApi()
    {
        var startDate = DateTime.Now.Date;
        var endDate = startDate.AddDays(7);
        await TestSingleApi("GET", $"api/schedule/calendar?startDate={startDate:yyyy-MM-dd}&endDate={endDate:yyyy-MM-dd}", "获取日历视图");
    }

    private async Task TestAddActivityToScheduleApi()
    {
        if (createdActivityId.HasValue)
        {
            await TestSingleApi("POST", $"api/schedule/activities/{createdActivityId.Value}", "添加活动到日程");
        }
        else
        {
            AddLog("请先创建活动再进行添加活动到日程测试", LogType.Warning);
        }
    }

    private async Task TestRemoveActivityFromScheduleApi()
    {
        if (createdActivityId.HasValue)
        {
            await TestSingleApi("DELETE", $"api/schedule/activities/{createdActivityId.Value}", "从日程移除活动");
        }
        else
        {
            AddLog("请先创建活动再进行从日程移除活动测试", LogType.Warning);
        }
    }

    // 活动相关测试方法
    private async Task TestCreateActivityApi()
    {
        var createActivityDto = new CreateActivityDto
        {
            Title = $"测试活动 {DateTime.Now:yyyy-MM-dd HH:mm}",
            Description = "这是一个测试活动",
            StartTime = DateTime.Now.AddDays(1),
            EndTime = DateTime.Now.AddDays(1).AddHours(2),
            RegistrationDeadline = DateTime.Now.AddHours(12),
            Location = "测试地点",
            MaxParticipants = 50,
            CategoryId = 1
        };
        await TestSingleApi("POST", "api/activities", "创建活动", createActivityDto);
    }

    // 认证相关测试方法
    private async Task TestRegisterApi()
    {
        var registerDto = new RegisterDto
        {
            Username = $"testuser_{DateTime.Now.Ticks}",
            Password = "test123",
            Email = $"test{DateTime.Now.Ticks}@test.com",
            FullName = "测试用户",
            Role = UserRole.Student
        };
        await TestSingleApi("POST", "api/auth/register", "用户注册", registerDto);
    }

    // 推荐系统相关测试方法
    private async Task TestUpdateUserPreference()
    {
        try
        {
            AddLog("开始测试更新用户偏好...", LogType.Info);
            
            var updateDto = new { CategoryId = 1, Weight = 0.8 };
            var json = JsonSerializer.Serialize(updateDto);
            var content = new StringContent(json, Encoding.UTF8, "application/json");
            
            var response = await Http.PostAsync("api/recommendations/preferences", content);
            
            if (response.IsSuccessStatusCode)
            {
                var responseContent = await response.Content.ReadAsStringAsync();
                AddLog($"✅ 更新用户偏好成功: {responseContent}", LogType.Success);
            }
            else
            {
                AddLog($"❌ 更新用户偏好失败: {response.StatusCode} - {response.ReasonPhrase}", LogType.Error);
            }
        }
        catch (Exception ex)
        {
            AddLog($"❌ 更新用户偏好异常: {ex.Message}", LogType.Error);
        }
    }

    // 公开API测试方法
    private async Task TestBasicConnection()
    {
        await TestSingleApi("GET", "api/test", "基础连接测试");
    }

    private async Task TestHealthCheck()
    {
        await TestSingleApi("GET", "api/test/health", "健康检查");
    }

    private async Task TestDatabaseConnection()
    {
        await TestSingleApi("GET", "api/test/database", "数据库连接测试");
    }

    private async Task TestDatabaseStatus()
    {
        await TestSingleApi("GET", "api/test/status", "数据库状态检查");
    }

    private async Task TestGetActivities()
    {
        await TestSingleApi("GET", "api/activities?pageIndex=1&pageSize=5", "获取活动列表");
    }

    private async Task TestGetCategories()
    {
        await TestSingleApi("GET", "api/activities/categories", "获取活动分类");
    }

    private async Task TestGetPopularActivities()
    {
        await TestSingleApi("GET", "api/activities/popular?count=5", "获取热门活动");
    }

    // 认证API测试方法
    private async Task TestGetUserProfile()
    {
        await TestSingleApi("GET", "api/auth/profile", "获取用户资料");
    }

    private async Task TestGetMyRegistrations()
    {
        await TestSingleApi("GET", "api/activities/my-registrations", "获取我的报名活动");
    }

    // 日程表API测试方法
    private async Task TestGetScheduleList()
    {
        await TestSingleApi("GET", "api/schedule?pageIndex=1&pageSize=5", "获取日程列表");
    }

    private async Task TestGetUpcomingItems()
    {
        await TestSingleApi("GET", "api/schedule/upcoming?count=5", "获取即将到来的日程");
    }

    private async Task TestGetOverdueItems()
    {
        await TestSingleApi("GET", "api/schedule/overdue", "获取逾期日程");
    }

    private async Task TestGetScheduleStatistics()
    {
        await TestSingleApi("GET", "api/schedule/statistics", "获取日程统计");
    }

    // 推荐系统API测试方法
    private async Task TestGetPersonalizedRecommendations()
    {
        await TestSingleApi("GET", "api/recommendations?count=5", "获取个性化推荐");
    }

    private async Task TestGetCollaborativeRecommendations()
    {
        await TestSingleApi("GET", "api/recommendations/collaborative?count=5", "获取协同过滤推荐");
    }

    private async Task TestGetContentBasedRecommendations()
    {
        await TestSingleApi("GET", "api/recommendations/content-based?count=5", "获取基于内容的推荐");
    }

    private async Task TestRecalculateRecommendations()
    {
        try
        {
            AddLog("开始测试重新计算推荐...", LogType.Info);
            
            var response = await Http.PostAsync("api/recommendations/recalculate", null);
            
            if (response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadAsStringAsync();
                AddLog($"✅ 重新计算推荐成功: {content}", LogType.Success);
            }
            else
            {
                AddLog($"❌ 重新计算推荐失败: {response.StatusCode} - {response.ReasonPhrase}", LogType.Error);
            }
        }
        catch (Exception ex)
        {
            AddLog($"❌ 重新计算推荐异常: {ex.Message}", LogType.Error);
        }
    }

    // 认证相关测试方法
    private async Task TestAuthentication()
    {
        AddLog("=== 测试认证状态 ===", LogType.Info);
        
        try
        {
            // 检查认证状态
            var authStatus = await AuthService.IsAuthenticatedAsync();
            AddLog($"认证状态: {(authStatus ? "已认证" : "未认证")}", LogType.Info);
            
            // 获取token
            var token = await AuthService.GetTokenAsync();
            if (!string.IsNullOrEmpty(token))
            {
                AddLog($"Token存在: {token.Substring(0, Math.Min(50, token.Length))}...", LogType.Success);
                AddLog($"Token完整长度: {token.Length}", LogType.Info);
                
                // 解析JWT token
                await DecodeJwtToken(token);
                
                // 测试token有效性
                var client = HttpClientFactory.CreateClient("CampusActivityAPI");
                client.DefaultRequestHeaders.Authorization = 
                    new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
                
                var response = await client.GetAsync("api/auth/profile");
                if (response.IsSuccessStatusCode)
                {
                    AddLog("✅ Token有效，可以访问认证API", LogType.Success);
                    isAuthenticated = true;
                }
                else
                {
                    var responseContent = await response.Content.ReadAsStringAsync();
                    AddLog($"❌ Token无效，状态码: {(int)response.StatusCode}, 响应: {responseContent}", LogType.Error);
                    isAuthenticated = false;
                }
            }
            else
            {
                AddLog("❌ 未找到Token", LogType.Error);
                isAuthenticated = false;
            }
        }
        catch (Exception ex)
        {
            AddLog($"认证测试失败: {ex.Message}", LogType.Error);
        }
    }

    private async Task DecodeJwtToken(string token)
    {
        try
        {
            var handler = new System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler();
            var jsonToken = handler.ReadJwtToken(token);
            
            AddLog("=== JWT Token 解析 ===", LogType.Info);
            AddLog($"Token类型: {jsonToken.Header.Typ}", LogType.Info);
            AddLog($"算法: {jsonToken.Header.Alg}", LogType.Info);
            AddLog($"过期时间: {jsonToken.ValidTo}", LogType.Info);
            
            AddLog("Claims:", LogType.Info);
            foreach (var claim in jsonToken.Claims)
            {
                AddLog($"  {claim.Type}: {claim.Value}", LogType.Info);
            }
        }
        catch (Exception ex)
        {
            AddLog($"❌ JWT Token解析失败: {ex.Message}", LogType.Error);
        }
    }

    private async Task TestLocalStorageToken()
    {
        AddLog("=== 测试LocalStorage中的Token ===", LogType.Info);
        
        try
        {
            // 使用AuthService来获取token
            var token = await AuthService.GetTokenAsync();
            
            if (!string.IsNullOrEmpty(token))
            {
                AddLog($"✅ LocalStorage中找到Token: {token.Substring(0, Math.Min(50, token.Length))}...", LogType.Success);
                AddLog($"Token长度: {token.Length}", LogType.Info);
                
                // 验证token格式
                if (token.Contains(".") && token.Split('.').Length == 3)
                {
                    AddLog("✅ Token格式正确 (JWT格式)", LogType.Success);
                }
                else
                {
                    AddLog("❌ Token格式不正确", LogType.Error);
                }
            }
            else
            {
                AddLog("❌ LocalStorage中未找到Token", LogType.Error);
            }
        }
        catch (Exception ex)
        {
            AddLog($"❌ 访问LocalStorage失败: {ex.Message}", LogType.Error);
        }
    }

    private async Task SetAuthHeader(HttpClient client)
    {
        try
        {
            AddLog("开始设置认证头...", LogType.Info);
            
            var token = await AuthService.GetTokenAsync();
            AddLog($"从AuthService获取到Token: {(string.IsNullOrEmpty(token) ? "null" : "not null")}", LogType.Info);
            
            if (!string.IsNullOrEmpty(token))
            {
                AddLog($"Token长度: {token.Length}", LogType.Info);
                
                // 清除之前的认证头
                client.DefaultRequestHeaders.Remove("Authorization");
                AddLog("已清除之前的认证头", LogType.Info);
                
                // 设置新的认证头
                client.DefaultRequestHeaders.Authorization = 
                    new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
                AddLog($"✅ 认证头设置成功 (Token长度: {token.Length})", LogType.Success);
                AddLog($"Token前50字符: {token.Substring(0, Math.Min(50, token.Length))}...", LogType.Info);
            }
            else
            {
                AddLog("❌ 未找到认证token，请先登录", LogType.Warning);
            }
        }
        catch (Exception ex)
        {
            AddLog($"❌ 设置认证头失败: {ex.Message}", LogType.Warning);
            AddLog($"异常堆栈: {ex.StackTrace}", LogType.Error);
        }
    }

    private void ClearLogs()
    {
        testLogs.Clear();
        StateHasChanged();
    }

    private void AddLog(string message, LogType type = LogType.Info)
    {
        testLogs.Insert(0, new TestLog
        {
            Message = message,
            Type = type,
            Timestamp = DateTime.Now
        });
        StateHasChanged();
    }

    private string GetLogClass(LogType type) => type switch
    {
        LogType.Success => "text-success fw-bold",
        LogType.Error => "text-danger fw-bold",
        LogType.Warning => "text-warning fw-bold",
        LogType.Info => "text-dark",
        _ => "text-dark"
    };

    public class TestLog
    {
        public string Message { get; set; } = "";
        public LogType Type { get; set; }
        public DateTime Timestamp { get; set; }
    }

    public enum LogType
    {
        Info,
        Success,
        Warning,
        Error
    }

    // 改进的日程表测试方法 - 完整流程测试
    private async Task TestScheduleCompleteFlow()
    {
        AddLog("=== 开始日程表完整流程测试 ===", LogType.Info);
        
        try
        {
            // 1. 创建日程项
            AddLog("步骤1: 创建日程项", LogType.Info);
            var createScheduleDto = new CreateScheduleItemDto
            {
                Title = $"完整测试日程 {DateTime.Now:yyyy-MM-dd HH:mm:ss}",
                Description = "这是一个用于完整测试的日程项",
                StartTime = DateTime.Now.AddDays(1),
                EndTime = DateTime.Now.AddDays(1).AddHours(1),
                Type = ScheduleItemType.Personal,
                Priority = ScheduleItemPriority.Medium,
                Location = "测试地点"
            };
            
            await TestSingleApi("POST", "api/schedule", "创建日程项", createScheduleDto);
            
            if (!createdScheduleId.HasValue)
            {
                AddLog("❌ 创建日程项失败，无法获取ID，停止测试", LogType.Error);
                return;
            }
            
            AddLog($"✅ 日程项创建成功，ID: {createdScheduleId.Value}", LogType.Success);
            
            // 2. 更新日程项
            AddLog("步骤2: 更新日程项", LogType.Info);
            var updateScheduleDto = new UpdateScheduleItemDto
            {
                Id = createdScheduleId.Value,
                Title = $"更新后的日程 {DateTime.Now:yyyy-MM-dd HH:mm:ss}",
                Description = "这是更新后的日程项描述",
                StartTime = DateTime.Now.AddDays(2),
                EndTime = DateTime.Now.AddDays(2).AddHours(1),
                Type = ScheduleItemType.Personal,
                Priority = ScheduleItemPriority.High,
                Location = "更新后的地点",
                IsCompleted = false
            };
            
            await TestSingleApi("PUT", $"api/schedule/{createdScheduleId.Value}", "更新日程项", updateScheduleDto);
            
            // 3. 切换完成状态
            AddLog("步骤3: 切换完成状态", LogType.Info);
            await TestSingleApi("POST", $"api/schedule/{createdScheduleId.Value}/toggle-completion", "切换完成状态");
            
            // 4. 再次切换完成状态
            AddLog("步骤4: 再次切换完成状态", LogType.Info);
            await TestSingleApi("POST", $"api/schedule/{createdScheduleId.Value}/toggle-completion", "再次切换完成状态");
            
            // 5. 删除日程项
            AddLog("步骤5: 删除日程项", LogType.Info);
            await TestSingleApi("DELETE", $"api/schedule/{createdScheduleId.Value}", "删除日程项");
            
            // 清理ID
            createdScheduleId = null;
            
            AddLog("✅ 日程表完整流程测试完成", LogType.Success);
        }
        catch (Exception ex)
        {
            AddLog($"❌ 日程表完整流程测试失败: {ex.Message}", LogType.Error);
        }
    }

    // 改进的活动和日程关联测试方法
    private async Task TestActivityScheduleIntegration()
    {
        AddLog("=== 开始活动和日程关联测试 ===", LogType.Info);
        
        try
        {
            // 1. 创建活动
            AddLog("步骤1: 创建活动", LogType.Info);
            var createActivityDto = new CreateActivityDto
            {
                Title = $"集成测试活动 {DateTime.Now:yyyy-MM-dd HH:mm:ss}",
                Description = "这是一个用于集成测试的活动",
                StartTime = DateTime.Now.AddDays(3),
                EndTime = DateTime.Now.AddDays(3).AddHours(2),
                RegistrationDeadline = DateTime.Now.AddDays(2),
                Location = "集成测试地点",
                MaxParticipants = 30,
                CategoryId = 1
            };
            
            await TestSingleApi("POST", "api/activities", "创建活动", createActivityDto);
            
            if (!createdActivityId.HasValue)
            {
                AddLog("❌ 创建活动失败，无法获取ID，停止测试", LogType.Error);
                return;
            }
            
            AddLog($"✅ 活动创建成功，ID: {createdActivityId.Value}", LogType.Success);
            
            // 2. 添加活动到日程
            AddLog("步骤2: 添加活动到日程", LogType.Info);
            await TestSingleApi("POST", $"api/schedule/activities/{createdActivityId.Value}", "添加活动到日程");
            
            // 3. 从日程移除活动
            AddLog("步骤3: 从日程移除活动", LogType.Info);
            await TestSingleApi("DELETE", $"api/schedule/activities/{createdActivityId.Value}", "从日程移除活动");
            
            // 清理ID
            createdActivityId = null;
            
            AddLog("✅ 活动和日程关联测试完成", LogType.Success);
        }
        catch (Exception ex)
        {
            AddLog($"❌ 活动和日程关联测试失败: {ex.Message}", LogType.Error);
        }
    }

    // 改进的推荐系统测试方法
    private async Task TestRecommendationCompleteFlow()
    {
        AddLog("=== 开始推荐系统完整流程测试 ===", LogType.Info);
        
        try
        {
            // 1. 获取个性化推荐
            AddLog("步骤1: 获取个性化推荐", LogType.Info);
            await TestSingleApi("GET", "api/recommendations?count=5", "获取个性化推荐");
            
            // 2. 获取协同过滤推荐
            AddLog("步骤2: 获取协同过滤推荐", LogType.Info);
            await TestSingleApi("GET", "api/recommendations/collaborative?count=5", "获取协同过滤推荐");
            
            // 3. 获取基于内容的推荐
            AddLog("步骤3: 获取基于内容的推荐", LogType.Info);
            await TestSingleApi("GET", "api/recommendations/content-based?count=5", "获取基于内容的推荐");
            
            // 4. 获取用户偏好
            await TestGetUserPreferences();
            
            // 5. 更新用户偏好
            await TestUpdateUserPreference();
            
            // 6. 重新计算推荐
            await TestRecalculateRecommendations();
            
            AddLog("✅ 推荐系统完整流程测试完成", LogType.Success);
        }
        catch (Exception ex)
        {
            AddLog($"❌ 推荐系统完整流程测试失败: {ex.Message}", LogType.Error);
        }
    }

    // 简单的推荐系统连接测试
    private async Task TestRecommendationBasicConnection()
    {
        AddLog("=== 测试推荐系统基本连接 ===", LogType.Info);
        
        try
        {
            var client = HttpClientFactory.CreateClient("CampusActivityAPI");
            await SetAuthHeader(client);
            
            // 测试GET请求
            AddLog("测试GET /api/recommendations", LogType.Info);
            var getResponse = await client.GetAsync("api/recommendations?count=1");
            AddLog($"GET响应状态: {(int)getResponse.StatusCode} - {getResponse.StatusCode}", LogType.Info);
            
            // 测试POST请求
            AddLog("测试POST /api/recommendations/recalculate", LogType.Info);
            var postResponse = await client.PostAsync("api/recommendations/recalculate", null);
            AddLog($"POST响应状态: {(int)postResponse.StatusCode} - {postResponse.StatusCode}", LogType.Info);
            
            if (getResponse.IsSuccessStatusCode)
            {
                AddLog("✅ GET /api/recommendations 连接成功", LogType.Success);
            }
            else
            {
                var getContent = await getResponse.Content.ReadAsStringAsync();
                AddLog($"❌ GET /api/recommendations 失败: {getContent}", LogType.Error);
            }
            
            if (postResponse.IsSuccessStatusCode)
            {
                AddLog("✅ POST /api/recommendations/recalculate 连接成功", LogType.Success);
            }
            else
            {
                var postContent = await postResponse.Content.ReadAsStringAsync();
                AddLog($"❌ POST /api/recommendations/recalculate 失败: {postContent}", LogType.Error);
            }
        }
        catch (Exception ex)
        {
            AddLog($"❌ 推荐系统连接测试异常: {ex.Message}", LogType.Error);
        }
    }

    // 详细的推荐系统诊断测试
    private async Task TestRecommendationDiagnostics()
    {
        AddLog("=== 推荐系统详细诊断 ===", LogType.Info);
        
        try
        {
            var client = HttpClientFactory.CreateClient("CampusActivityAPI");
            
            // 1. 检查认证状态
            AddLog("步骤1: 检查认证状态", LogType.Info);
            var token = await AuthService.GetTokenAsync();
            if (string.IsNullOrEmpty(token))
            {
                AddLog("❌ 未找到认证token", LogType.Error);
                return;
            }
            AddLog($"✅ 找到认证token，长度: {token.Length}", LogType.Success);
            
            // 2. 设置认证头
            AddLog("步骤2: 设置认证头", LogType.Info);
            client.DefaultRequestHeaders.Authorization = 
                new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            AddLog("✅ 认证头已设置", LogType.Success);
            
            // 3. 测试基础连接
            AddLog("步骤3: 测试基础连接", LogType.Info);
            var baseResponse = await client.GetAsync("api/test");
            AddLog($"基础连接状态: {(int)baseResponse.StatusCode} - {baseResponse.StatusCode}", LogType.Info);
            
            // 4. 测试推荐系统GET端点
            AddLog("步骤4: 测试推荐系统GET端点", LogType.Info);
            var getResponse = await client.GetAsync("api/recommendations?count=1");
            AddLog($"GET /api/recommendations 状态: {(int)getResponse.StatusCode} - {getResponse.StatusCode}", LogType.Info);
            
            if (!getResponse.IsSuccessStatusCode)
            {
                var getContent = await getResponse.Content.ReadAsStringAsync();
                AddLog($"GET响应内容: {getContent}", LogType.Error);
            }
            
            // 5. 测试推荐系统POST端点
            AddLog("步骤5: 测试推荐系统POST端点", LogType.Info);
            var postResponse = await client.PostAsync("api/recommendations/recalculate", null);
            AddLog($"POST /api/recommendations/recalculate 状态: {(int)postResponse.StatusCode} - {postResponse.StatusCode}", LogType.Info);
            
            if (!postResponse.IsSuccessStatusCode)
            {
                var postContent = await postResponse.Content.ReadAsStringAsync();
                AddLog($"POST响应内容: {postContent}", LogType.Error);
            }
            
            // 6. 检查响应头
            AddLog("步骤6: 检查响应头", LogType.Info);
            AddLog($"GET响应头: {string.Join(", ", getResponse.Headers.Select(h => $"{h.Key}={string.Join(";", h.Value)}"))}", LogType.Info);
            AddLog($"POST响应头: {string.Join(", ", postResponse.Headers.Select(h => $"{h.Key}={string.Join(";", h.Value)}"))}", LogType.Info);
            
            // 7. 总结
            AddLog("步骤7: 诊断总结", LogType.Info);
            if (getResponse.IsSuccessStatusCode && postResponse.IsSuccessStatusCode)
            {
                AddLog("✅ 推荐系统API工作正常", LogType.Success);
            }
            else
            {
                AddLog("❌ 推荐系统API存在问题", LogType.Error);
                if (!getResponse.IsSuccessStatusCode)
                {
                    AddLog($"GET请求失败: {(int)getResponse.StatusCode} - {getResponse.StatusCode}", LogType.Error);
                }
                if (!postResponse.IsSuccessStatusCode)
                {
                    AddLog($"POST请求失败: {(int)postResponse.StatusCode} - {postResponse.StatusCode}", LogType.Error);
                }
            }
        }
        catch (Exception ex)
        {
            AddLog($"❌ 诊断测试异常: {ex.Message}", LogType.Error);
            AddLog($"异常堆栈: {ex.StackTrace}", LogType.Error);
        }
    }

    // 简单的路由测试
    private async Task TestRecommendationRoutes()
    {
        AddLog("=== 测试推荐系统路由 ===", LogType.Info);
        
        try
        {
            var client = HttpClientFactory.CreateClient("CampusActivityAPI");
            await SetAuthHeader(client);
            
            // 测试所有可能的HTTP方法
            var methods = new[] { "GET", "POST", "PUT", "DELETE", "PATCH" };
            var endpoints = new[] 
            { 
                "api/recommendations",
                "api/recommendations/recalculate",
                "api/recommendations/preferences"
            };
            
            foreach (var endpoint in endpoints)
            {
                AddLog($"测试端点: {endpoint}", LogType.Info);
                foreach (var method in methods)
                {
                    try
                    {
                        HttpResponseMessage response;
                        switch (method)
                        {
                            case "GET":
                                response = await client.GetAsync(endpoint);
                                break;
                            case "POST":
                                response = await client.PostAsync(endpoint, null);
                                break;
                            case "PUT":
                                response = await client.PutAsync(endpoint, null);
                                break;
                            case "DELETE":
                                response = await client.DeleteAsync(endpoint);
                                break;
                            case "PATCH":
                                response = await client.PatchAsync(endpoint, null);
                                break;
                            default:
                                continue;
                        }
                        
                        var statusCode = (int)response.StatusCode;
                        var statusText = response.StatusCode.ToString();
                        
                        if (statusCode == 405)
                        {
                            AddLog($"  {method}: {statusCode} - {statusText} (方法不被允许)", LogType.Warning);
                        }
                        else if (statusCode == 401)
                        {
                            AddLog($"  {method}: {statusCode} - {statusText} (需要认证)", LogType.Warning);
                        }
                        else if (statusCode == 404)
                        {
                            AddLog($"  {method}: {statusCode} - {statusText} (未找到)", LogType.Warning);
                        }
                        else if (statusCode >= 200 && statusCode < 300)
                        {
                            AddLog($"  {method}: {statusCode} - {statusText} ✅", LogType.Success);
                        }
                        else
                        {
                            AddLog($"  {method}: {statusCode} - {statusText}", LogType.Info);
                        }
                    }
                    catch (Exception ex)
                    {
                        AddLog($"  {method}: 异常 - {ex.Message}", LogType.Error);
                    }
                }
                AddLog("", LogType.Info); // 空行分隔
            }
        }
        catch (Exception ex)
        {
            AddLog($"❌ 路由测试异常: {ex.Message}", LogType.Error);
        }
    }

    // WebAPI状态检查
    private async Task TestWebApiStatus()
    {
        AddLog("=== WebAPI状态检查 ===", LogType.Info);
        
        try
        {
            var client = HttpClientFactory.CreateClient("CampusActivityAPI");
            
            // 1. 测试基础连接
            AddLog("步骤1: 测试基础连接", LogType.Info);
            var baseResponse = await client.GetAsync("api/test");
            AddLog($"基础连接状态: {(int)baseResponse.StatusCode} - {baseResponse.StatusCode}", LogType.Info);
            
            if (baseResponse.IsSuccessStatusCode)
            {
                var baseContent = await baseResponse.Content.ReadAsStringAsync();
                AddLog($"基础连接响应: {baseContent}", LogType.Success);
            }
            
            // 2. 测试健康检查
            AddLog("步骤2: 测试健康检查", LogType.Info);
            var healthResponse = await client.GetAsync("api/test/health");
            AddLog($"健康检查状态: {(int)healthResponse.StatusCode} - {healthResponse.StatusCode}", LogType.Info);
            
            if (healthResponse.IsSuccessStatusCode)
            {
                var healthContent = await healthResponse.Content.ReadAsStringAsync();
                AddLog($"健康检查响应: {healthContent}", LogType.Success);
            }
            
            // 3. 测试数据库连接
            AddLog("步骤3: 测试数据库连接", LogType.Info);
            var dbResponse = await client.GetAsync("api/test/database");
            AddLog($"数据库连接状态: {(int)dbResponse.StatusCode} - {dbResponse.StatusCode}", LogType.Info);
            
            if (dbResponse.IsSuccessStatusCode)
            {
                var dbContent = await dbResponse.Content.ReadAsStringAsync();
                AddLog($"数据库连接响应: {dbContent}", LogType.Success);
            }
            
            // 4. 测试Swagger文档
            AddLog("步骤4: 测试Swagger文档", LogType.Info);
            var swaggerResponse = await client.GetAsync("swagger/v1/swagger.json");
            AddLog($"Swagger文档状态: {(int)swaggerResponse.StatusCode} - {swaggerResponse.StatusCode}", LogType.Info);
            
            // 5. 测试推荐系统端点（无认证）
            AddLog("步骤5: 测试推荐系统端点（无认证）", LogType.Info);
            var recResponse = await client.GetAsync("api/recommendations");
            AddLog($"推荐系统状态: {(int)recResponse.StatusCode} - {recResponse.StatusCode}", LogType.Info);
            
            if (recResponse.StatusCode == System.Net.HttpStatusCode.Unauthorized)
            {
                AddLog("✅ 推荐系统端点存在，但需要认证", LogType.Success);
            }
            else if (recResponse.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                AddLog("❌ 推荐系统端点不存在", LogType.Error);
            }
            else
            {
                var recContent = await recResponse.Content.ReadAsStringAsync();
                AddLog($"推荐系统响应: {recContent}", LogType.Info);
            }
            
            // 6. 总结
            AddLog("步骤6: 状态总结", LogType.Info);
            if (baseResponse.IsSuccessStatusCode && healthResponse.IsSuccessStatusCode)
            {
                AddLog("✅ WebAPI服务器运行正常", LogType.Success);
            }
            else
            {
                AddLog("❌ WebAPI服务器存在问题", LogType.Error);
            }
        }
        catch (Exception ex)
        {
            AddLog($"❌ WebAPI状态检查异常: {ex.Message}", LogType.Error);
        }
    }

    // 简单的HTTP客户端测试
    private async Task TestHttpClientConfig()
    {
        AddLog("=== HTTP客户端配置测试 ===", LogType.Info);
        
        try
        {
            var client = HttpClientFactory.CreateClient("CampusActivityAPI");
            
            AddLog($"HTTP客户端BaseAddress: {client.BaseAddress}", LogType.Info);
            AddLog($"HTTP客户端默认请求头: {string.Join(", ", client.DefaultRequestHeaders.Select(h => $"{h.Key}={string.Join(";", h.Value)}"))}", LogType.Info);
            
            // 测试直接访问
            AddLog("测试直接访问 api/test", LogType.Info);
            var response = await client.GetAsync("api/test");
            AddLog($"响应状态: {(int)response.StatusCode} - {response.StatusCode}", LogType.Info);
            
            if (response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadAsStringAsync();
                AddLog($"响应内容: {content}", LogType.Success);
            }
            else
            {
                var content = await response.Content.ReadAsStringAsync();
                AddLog($"错误响应: {content}", LogType.Error);
            }
            
            // 测试完整URL
            AddLog("测试完整URL", LogType.Info);
            var fullUrl = $"{client.BaseAddress}api/test";
            AddLog($"完整URL: {fullUrl}", LogType.Info);
            
            var fullResponse = await client.GetAsync(fullUrl);
            AddLog($"完整URL响应状态: {(int)fullResponse.StatusCode} - {fullResponse.StatusCode}", LogType.Info);
            
        }
        catch (Exception ex)
        {
            AddLog($"❌ HTTP客户端配置测试异常: {ex.Message}", LogType.Error);
        }
    }

    /// <summary>
    /// 测试获取用户偏好
    /// </summary>
    private async Task TestGetUserPreferences()
    {
        try
        {
            AddLog("开始测试获取用户偏好...", LogType.Info);
            
            var response = await Http.GetAsync("api/recommendations/preferences");
            
            if (response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadAsStringAsync();
                AddLog($"✅ 获取用户偏好成功: {content}", LogType.Success);
            }
            else
            {
                AddLog($"❌ 获取用户偏好失败: {response.StatusCode} - {response.ReasonPhrase}", LogType.Error);
            }
        }
        catch (Exception ex)
        {
            AddLog($"❌ 获取用户偏好异常: {ex.Message}", LogType.Error);
        }
    }

    // 测试AI API超时和重试
    private async Task TestAiApiTimeout()
    {
        AddLog("=== AI API超时和重试测试 ===", LogType.Info);
        
        try
        {
            var client = HttpClientFactory.CreateClient("CampusActivityAPI");
            
            var testRequest = new
            {
                message = "这是一个测试消息，用于验证AI API的超时和重试机制",
                userId = "1"
            };
            
            var json = System.Text.Json.JsonSerializer.Serialize(testRequest);
            var content = new StringContent(json, System.Text.Encoding.UTF8, "application/json");
            
            AddLog("开始测试AI API调用...", LogType.Info);
            var startTime = DateTime.Now;
            
            var response = await client.PostAsync("api/chat/send", content);
            var endTime = DateTime.Now;
            var duration = (endTime - startTime).TotalSeconds;
            
            AddLog($"AI API调用完成，耗时: {duration:F2}秒", LogType.Info);
            AddLog($"响应状态: {(int)response.StatusCode} - {response.StatusCode}", LogType.Info);
            
            if (response.IsSuccessStatusCode)
            {
                var responseContent = await response.Content.ReadAsStringAsync();
                AddLog($"AI响应成功，内容长度: {responseContent.Length}字符", LogType.Success);
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                AddLog($"AI API调用失败: {errorContent}", LogType.Error);
            }
        }
        catch (Exception ex)
        {
            AddLog($"❌ AI API测试异常: {ex.Message}", LogType.Error);
        }
    }
} 